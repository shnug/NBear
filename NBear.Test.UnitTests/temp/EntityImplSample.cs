//------------------------------------------------------------------------------
    // <auto-generated>
    //     This code was generated by a tool.
    //     Runtime Version:2.0.50727.42
    //
    //     Changes to this file may cause incorrect behavior and will be lost if
    //     the code is regenerated.
    // </auto-generated>
    //------------------------------------------------------------------------------
    
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class OrderDetailsExtendedArrayList : NBear.Common.EntityArrayList<Entities.OrderDetailsExtended> {
        }
        
        [System.SerializableAttribute()]
        [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Entities.OrderDetailsExtended\" isReadOnly=\"true\" isAutoPreLoad=\"false\" isB" +
        "atchUpdate=\"false\" isRelation=\"false\" mappingName=\"Order Details Extended\" batch" +
        "Size=\"10\">\r\n  <Properties>\r\n    <Property name=\"OrderID\" type=\"System.Int32\" isI" +
        "nherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" is" +
        "Query=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInd" +
        "exProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" map" +
        "pingName=\"OrderID\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"" +
        "true\" isNotNull=\"true\" />\r\n    <Property name=\"ProductID\" type=\"System.Int32\" is" +
        "Inherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" i" +
        "sQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIn" +
        "dexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" ma" +
        "ppingName=\"ProductID\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKe" +
        "y=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ProductName\" type=\"System.St" +
        "ring\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"" +
        "false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"fal" +
        "se\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"f" +
        "alse\" mappingName=\"ProductName\" mappingColumnType=\"System.String\" sqlType=\"nvarc" +
        "har(127)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"UnitPri" +
        "ce\" type=\"System.Decimal\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"" +
        "false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false" +
        "\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSe" +
        "rializationIgnore=\"false\" mappingName=\"UnitPrice\" mappingColumnType=\"System.Deci" +
        "mal\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property " +
        "name=\"Quantity\" type=\"System.Int16\" isInherited=\"false\" isReadOnly=\"true\" isComp" +
        "oundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyL" +
        "oad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"f" +
        "alse\" isSerializationIgnore=\"false\" mappingName=\"Quantity\" mappingColumnType=\"Sy" +
        "stem.Int16\" sqlType=\"smallint\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <P" +
        "roperty name=\"Discount\" type=\"System.Single\" isInherited=\"false\" isReadOnly=\"tru" +
        "e\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false" +
        "\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProper" +
        "tyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Discount\" mappingColum" +
        "nType=\"System.Single\" sqlType=\"real\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n" +
        "    <Property name=\"ExtendedPrice\" type=\"System.Decimal\" isInherited=\"false\" isR" +
        "eadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrie" +
        "ndKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" i" +
        "sIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ExtendedPr" +
        "ice\" mappingColumnType=\"System.Decimal\" sqlType=\"decimal\" isPrimaryKey=\"false\" i" +
        "sNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
        public partial class OrderDetailsExtended : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _OrderDetailsExtendedEntityConfiguration;
            
            protected int _OrderID;
            
            protected int _ProductID;
            
            protected string _ProductName;
            
            protected decimal _UnitPrice;
            
            protected short _Quantity;
            
            protected float _Discount;
            
            protected decimal _ExtendedPrice;
            
            public static @__Columns _ = new @__Columns();
            
    		public static bool operator ==(global::Entities.OrderDetailsExtended left, global::Entities.OrderDetailsExtended right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.OrderDetailsExtended left, global::Entities.OrderDetailsExtended right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int OrderID {
                get {
                    return this._OrderID;
                }
                set {
                    this.OnPropertyChanged("OrderID", this._OrderID, value);
                    this._OrderID = value;
                }
            }
            
            public int ProductID {
                get {
                    return this._ProductID;
                }
                set {
                    this.OnPropertyChanged("ProductID", this._ProductID, value);
                    this._ProductID = value;
                }
            }
            
            public string ProductName {
                get {
                    return this._ProductName;
                }
                set {
                    this.OnPropertyChanged("ProductName", this._ProductName, value);
                    this._ProductName = value;
                }
            }
            
            public decimal UnitPrice {
                get {
                    return this._UnitPrice;
                }
                set {
                    this.OnPropertyChanged("UnitPrice", this._UnitPrice, value);
                    this._UnitPrice = value;
                }
            }
            
            public short Quantity {
                get {
                    return this._Quantity;
                }
                set {
                    this.OnPropertyChanged("Quantity", this._Quantity, value);
                    this._Quantity = value;
                }
            }
            
            public float Discount {
                get {
                    return this._Discount;
                }
                set {
                    this.OnPropertyChanged("Discount", this._Discount, value);
                    this._Discount = value;
                }
            }
            
            public decimal ExtendedPrice {
                get {
                    return this._ExtendedPrice;
                }
                set {
                    this.OnPropertyChanged("ExtendedPrice", this._ExtendedPrice, value);
                    this._ExtendedPrice = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((OrderDetailsExtended._OrderDetailsExtendedEntityConfiguration == null)) {
                    OrderDetailsExtended._OrderDetailsExtendedEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.OrderDetailsExtended");
                }
                return OrderDetailsExtended._OrderDetailsExtendedEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._OrderID,
                        this._ProductID,
                        this._ProductName,
                        this._UnitPrice,
                        this._Quantity,
                        this._Discount,
                        this._ExtendedPrice};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._OrderID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._ProductID = reader.GetInt32(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._ProductName = reader.GetString(2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._UnitPrice = reader.GetDecimal(3);
                }
                if ((false == reader.IsDBNull(4))) {
                    this._Quantity = reader.GetInt16(4);
                }
                if ((false == reader.IsDBNull(5))) {
                    this._Discount = reader.GetFloat(5);
                }
                if ((false == reader.IsDBNull(6))) {
                    this._ExtendedPrice = reader.GetDecimal(6);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._OrderID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._ProductID = ((int)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._ProductName = ((string)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._UnitPrice = ((decimal)(row[3]));
                }
                if ((false == row.IsNull(4))) {
                    this._Quantity = ((short)(row[4]));
                }
                if ((false == row.IsNull(5))) {
                    this._Discount = ((float)(row[5]));
                }
                if ((false == row.IsNull(6))) {
                    this._ExtendedPrice = ((decimal)(row[6]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.OrderDetailsExtended).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.OrderDetailsExtended)(obj)).isAttached) 
                            && (this.OrderID == ((global::Entities.OrderDetailsExtended)(obj)).OrderID));
            }
            
            public static @__Columns @__Alias(string aliasName) {
                return new @__Columns(aliasName);
            }
            
            public class @__Columns {
                
                protected string aliasName;
                
                protected NBear.Common.PropertyItem _OrderID = new NBear.Common.PropertyItem("OrderID", "Entities.OrderDetailsExtended");
                
                protected NBear.Common.PropertyItem _ProductID = new NBear.Common.PropertyItem("ProductID", "Entities.OrderDetailsExtended");
                
                protected NBear.Common.PropertyItem _ProductName = new NBear.Common.PropertyItem("ProductName", "Entities.OrderDetailsExtended");
                
                protected NBear.Common.PropertyItem _UnitPrice = new NBear.Common.PropertyItem("UnitPrice", "Entities.OrderDetailsExtended");
                
                protected NBear.Common.PropertyItem _Quantity = new NBear.Common.PropertyItem("Quantity", "Entities.OrderDetailsExtended");
                
                protected NBear.Common.PropertyItem _Discount = new NBear.Common.PropertyItem("Discount", "Entities.OrderDetailsExtended");
                
                protected NBear.Common.PropertyItem _ExtendedPrice = new NBear.Common.PropertyItem("ExtendedPrice", "Entities.OrderDetailsExtended");
                
                public @__Columns() {
                }
                
                public @__Columns(string aliasName) {
                    this.aliasName = aliasName;
                }
                
                public NBear.Common.PropertyItem OrderID {
                    get {
                        if ((aliasName == null)) {
                            return _OrderID;
                        }
                        else {
                            return new NBear.Common.PropertyItem("OrderID", _OrderID.EntityConfiguration, _OrderID.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem ProductID {
                    get {
                        if ((aliasName == null)) {
                            return _ProductID;
                        }
                        else {
                            return new NBear.Common.PropertyItem("ProductID", _ProductID.EntityConfiguration, _ProductID.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem ProductName {
                    get {
                        if ((aliasName == null)) {
                            return _ProductName;
                        }
                        else {
                            return new NBear.Common.PropertyItem("ProductName", _ProductName.EntityConfiguration, _ProductName.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem UnitPrice {
                    get {
                        if ((aliasName == null)) {
                            return _UnitPrice;
                        }
                        else {
                            return new NBear.Common.PropertyItem("UnitPrice", _UnitPrice.EntityConfiguration, _UnitPrice.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem Quantity {
                    get {
                        if ((aliasName == null)) {
                            return _Quantity;
                        }
                        else {
                            return new NBear.Common.PropertyItem("Quantity", _Quantity.EntityConfiguration, _Quantity.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem Discount {
                    get {
                        if ((aliasName == null)) {
                            return _Discount;
                        }
                        else {
                            return new NBear.Common.PropertyItem("Discount", _Discount.EntityConfiguration, _Discount.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem ExtendedPrice {
                    get {
                        if ((aliasName == null)) {
                            return _ExtendedPrice;
                        }
                        else {
                            return new NBear.Common.PropertyItem("ExtendedPrice", _ExtendedPrice.EntityConfiguration, _ExtendedPrice.PropertyConfiguration, aliasName);
                        }
                    }
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class OrderDetailsExtendedSummaryArrayList : NBear.Common.EntityArrayList<Entities.OrderDetailsExtendedSummary> {
        }
        
        [System.SerializableAttribute()]
        [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Entities.OrderDetailsExtendedSummary\" isReadOnly=\"true\" isAutoPreLoad=\"fal" +
        "se\" isBatchUpdate=\"false\" isRelation=\"false\" mappingName=\"Order Details Extended" +
        "\" batchSize=\"10\">\r\n  <Properties>\r\n    <Property name=\"ProductName\" type=\"System" +
        ".String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContaine" +
        "d=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"" +
        "false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore" +
        "=\"false\" mappingName=\"ProductName\" mappingColumnType=\"System.String\" sqlType=\"nv" +
        "archar(127)\" isPrimaryKey=\"true\" isNotNull=\"true\" />\r\n    <Property name=\"UnitPr" +
        "ice\" type=\"System.Decimal\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=" +
        "\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"fals" +
        "e\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isS" +
        "erializationIgnore=\"false\" mappingName=\"UnitPrice\" mappingColumnType=\"System.Dec" +
        "imal\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property" +
        " name=\"Quantity\" type=\"System.Int16\" isInherited=\"false\" isReadOnly=\"true\" isCom" +
        "poundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazy" +
        "Load=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"" +
        "false\" isSerializationIgnore=\"false\" mappingName=\"Quantity\" mappingColumnType=\"S" +
        "ystem.Int16\" sqlType=\"smallint\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <" +
        "Property name=\"Discount\" type=\"System.Int32\" isInherited=\"false\" isReadOnly=\"tru" +
        "e\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false" +
        "\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProper" +
        "tyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Discount\" mappingColum" +
        "nType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  " +
        "  <Property name=\"ExtendedPrice\" type=\"System.Decimal\" isInherited=\"false\" isRea" +
        "dOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriend" +
        "Key=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isI" +
        "ndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ExtendedPric" +
        "e\" mappingColumnType=\"System.Decimal\" sqlType=\"decimal\" isPrimaryKey=\"false\" isN" +
        "otNull=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
        public partial class OrderDetailsExtendedSummary : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _OrderDetailsExtendedSummaryEntityConfiguration;
            
            protected string _ProductName;
            
            protected decimal _UnitPrice;
            
            protected short _Quantity;
            
            protected int _Discount;
            
            protected decimal _ExtendedPrice;
            
            public static @__Columns _ = new @__Columns();
            
    		public static bool operator ==(global::Entities.OrderDetailsExtendedSummary left, global::Entities.OrderDetailsExtendedSummary right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.OrderDetailsExtendedSummary left, global::Entities.OrderDetailsExtendedSummary right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public string ProductName {
                get {
                    return this._ProductName;
                }
                set {
                    this.OnPropertyChanged("ProductName", this._ProductName, value);
                    this._ProductName = value;
                }
            }
            
            public decimal UnitPrice {
                get {
                    return this._UnitPrice;
                }
                set {
                    this.OnPropertyChanged("UnitPrice", this._UnitPrice, value);
                    this._UnitPrice = value;
                }
            }
            
            public short Quantity {
                get {
                    return this._Quantity;
                }
                set {
                    this.OnPropertyChanged("Quantity", this._Quantity, value);
                    this._Quantity = value;
                }
            }
            
            public int Discount {
                get {
                    return this._Discount;
                }
                set {
                    this.OnPropertyChanged("Discount", this._Discount, value);
                    this._Discount = value;
                }
            }
            
            public decimal ExtendedPrice {
                get {
                    return this._ExtendedPrice;
                }
                set {
                    this.OnPropertyChanged("ExtendedPrice", this._ExtendedPrice, value);
                    this._ExtendedPrice = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((OrderDetailsExtendedSummary._OrderDetailsExtendedSummaryEntityConfiguration == null)) {
                    OrderDetailsExtendedSummary._OrderDetailsExtendedSummaryEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.OrderDetailsExtendedSummary");
                }
                return OrderDetailsExtendedSummary._OrderDetailsExtendedSummaryEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ProductName,
                        this._UnitPrice,
                        this._Quantity,
                        this._Discount,
                        this._ExtendedPrice};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ProductName = reader.GetString(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._UnitPrice = reader.GetDecimal(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._Quantity = reader.GetInt16(2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._Discount = reader.GetInt32(3);
                }
                if ((false == reader.IsDBNull(4))) {
                    this._ExtendedPrice = reader.GetDecimal(4);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ProductName = ((string)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._UnitPrice = ((decimal)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._Quantity = ((short)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._Discount = ((int)(row[3]));
                }
                if ((false == row.IsNull(4))) {
                    this._ExtendedPrice = ((decimal)(row[4]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.OrderDetailsExtendedSummary).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.OrderDetailsExtendedSummary)(obj)).isAttached) 
                            && (this.ProductName == ((global::Entities.OrderDetailsExtendedSummary)(obj)).ProductName));
            }
            
            public static @__Columns @__Alias(string aliasName) {
                return new @__Columns(aliasName);
            }
            
            public class @__Columns {
                
                protected string aliasName;
                
                protected NBear.Common.PropertyItem _ProductName = new NBear.Common.PropertyItem("ProductName", "Entities.OrderDetailsExtendedSummary");
                
                protected NBear.Common.PropertyItem _UnitPrice = new NBear.Common.PropertyItem("UnitPrice", "Entities.OrderDetailsExtendedSummary");
                
                protected NBear.Common.PropertyItem _Quantity = new NBear.Common.PropertyItem("Quantity", "Entities.OrderDetailsExtendedSummary");
                
                protected NBear.Common.PropertyItem _Discount = new NBear.Common.PropertyItem("Discount", "Entities.OrderDetailsExtendedSummary");
                
                protected NBear.Common.PropertyItem _ExtendedPrice = new NBear.Common.PropertyItem("ExtendedPrice", "Entities.OrderDetailsExtendedSummary");
                
                public @__Columns() {
                }
                
                public @__Columns(string aliasName) {
                    this.aliasName = aliasName;
                }
                
                public NBear.Common.PropertyItem ProductName {
                    get {
                        if ((aliasName == null)) {
                            return _ProductName;
                        }
                        else {
                            return new NBear.Common.PropertyItem("ProductName", _ProductName.EntityConfiguration, _ProductName.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem UnitPrice {
                    get {
                        if ((aliasName == null)) {
                            return _UnitPrice;
                        }
                        else {
                            return new NBear.Common.PropertyItem("UnitPrice", _UnitPrice.EntityConfiguration, _UnitPrice.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem Quantity {
                    get {
                        if ((aliasName == null)) {
                            return _Quantity;
                        }
                        else {
                            return new NBear.Common.PropertyItem("Quantity", _Quantity.EntityConfiguration, _Quantity.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem Discount {
                    get {
                        if ((aliasName == null)) {
                            return _Discount;
                        }
                        else {
                            return new NBear.Common.PropertyItem("Discount", _Discount.EntityConfiguration, _Discount.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem ExtendedPrice {
                    get {
                        if ((aliasName == null)) {
                            return _ExtendedPrice;
                        }
                        else {
                            return new NBear.Common.PropertyItem("ExtendedPrice", _ExtendedPrice.EntityConfiguration, _ExtendedPrice.PropertyConfiguration, aliasName);
                        }
                    }
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class CategoryArrayList : NBear.Common.EntityArrayList<Entities.Category> {
        }
        
        [System.SerializableAttribute()]
        [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Entities.Category\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBatchUpdate=" +
        "\"false\" isRelation=\"false\" mappingName=\"Categories\" batchSize=\"10\">\r\n  <Properti" +
        "es>\r\n    <Property name=\"CategoryID\" type=\"System.Int32\" isInherited=\"false\" isR" +
        "eadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrie" +
        "ndKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" i" +
        "sIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"CategoryID" +
        "\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true\" isNotNull=\"" +
        "true\" />\r\n    <Property name=\"CategoryName\" type=\"System.String\" isInherited=\"fa" +
        "lse\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fals" +
        "e\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=" +
        "\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"C" +
        "ategoryName\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(127)\" isPrimary" +
        "Key=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Description\" type=\"System." +
        "String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContaine" +
        "d=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"" +
        "false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore" +
        "=\"false\" mappingName=\"Description\" mappingColumnType=\"System.String\" sqlType=\"nv" +
        "archar(127)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Pict" +
        "ure\" type=\"System.Byte[]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=" +
        "\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"fals" +
        "e\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isS" +
        "erializationIgnore=\"false\" mappingName=\"Picture\" mappingColumnType=\"System.Byte[" +
        "]\" sqlType=\"image\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n<" +
        "/EntityConfiguration>")]
        public partial class Category : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _CategoryEntityConfiguration;
            
            protected int _CategoryID;
            
            protected string _CategoryName;
            
            protected string _Description;
            
            protected byte[] _Picture;
            
            public static @__Columns _ = new @__Columns();
            
    		public static bool operator ==(global::Entities.Category left, global::Entities.Category right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.Category left, global::Entities.Category right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int CategoryID {
                get {
                    return this._CategoryID;
                }
                set {
                    this.OnPropertyChanged("CategoryID", this._CategoryID, value);
                    this._CategoryID = value;
                }
            }
            
            public string CategoryName {
                get {
                    return this._CategoryName;
                }
                set {
                    this.OnPropertyChanged("CategoryName", this._CategoryName, value);
                    this._CategoryName = value;
                }
            }
            
            public string Description {
                get {
                    return this._Description;
                }
                set {
                    this.OnPropertyChanged("Description", this._Description, value);
                    this._Description = value;
                }
            }
            
            public byte[] Picture {
                get {
                    return this._Picture;
                }
                set {
                    this.OnPropertyChanged("Picture", this._Picture, value);
                    this._Picture = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((Category._CategoryEntityConfiguration == null)) {
                    Category._CategoryEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.Category");
                }
                return Category._CategoryEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._CategoryID,
                        this._CategoryName,
                        this._Description,
                        this._Picture};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._CategoryID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._CategoryName = reader.GetString(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._Description = reader.GetString(2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._Picture = ((byte[])(reader.GetValue(3)));
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._CategoryID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._CategoryName = ((string)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._Description = ((string)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._Picture = ((byte[])(row[3]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.Category).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.Category)(obj)).isAttached) 
                            && (this.CategoryID == ((global::Entities.Category)(obj)).CategoryID));
            }
            
            public static @__Columns @__Alias(string aliasName) {
                return new @__Columns(aliasName);
            }
            
            public class @__Columns {
                
                protected string aliasName;
                
                protected NBear.Common.PropertyItem _CategoryID = new NBear.Common.PropertyItem("CategoryID", "Entities.Category");
                
                protected NBear.Common.PropertyItem _CategoryName = new NBear.Common.PropertyItem("CategoryName", "Entities.Category");
                
                protected NBear.Common.PropertyItem _Description = new NBear.Common.PropertyItem("Description", "Entities.Category");
                
                protected NBear.Common.PropertyItem _Picture = new NBear.Common.PropertyItem("Picture", "Entities.Category");
                
                public @__Columns() {
                }
                
                public @__Columns(string aliasName) {
                    this.aliasName = aliasName;
                }
                
                public NBear.Common.PropertyItem CategoryID {
                    get {
                        if ((aliasName == null)) {
                            return _CategoryID;
                        }
                        else {
                            return new NBear.Common.PropertyItem("CategoryID", _CategoryID.EntityConfiguration, _CategoryID.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem CategoryName {
                    get {
                        if ((aliasName == null)) {
                            return _CategoryName;
                        }
                        else {
                            return new NBear.Common.PropertyItem("CategoryName", _CategoryName.EntityConfiguration, _CategoryName.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem Description {
                    get {
                        if ((aliasName == null)) {
                            return _Description;
                        }
                        else {
                            return new NBear.Common.PropertyItem("Description", _Description.EntityConfiguration, _Description.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem Picture {
                    get {
                        if ((aliasName == null)) {
                            return _Picture;
                        }
                        else {
                            return new NBear.Common.PropertyItem("Picture", _Picture.EntityConfiguration, _Picture.PropertyConfiguration, aliasName);
                        }
                    }
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class PrivilegeOwnerArrayList : NBear.Common.EntityArrayList<Entities.PrivilegeOwner> {
        }
        
        [System.SerializableAttribute()]
        [NBear.Common.EmbeddedEntityConfigurationAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<EntityConfiguration xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" name=""Entities.PrivilegeOwner"" isReadOnly=""false"" isAutoPreLoad=""false"" isBatchUpdate=""false"" isRelation=""false"" mappingName=""PrivilegeOwner"" batchSize=""10"">
  <Properties>
    <Property name=""ID"" type=""System.Int32"" isInherited=""false"" isReadOnly=""false"" isCompoundUnit=""false"" isContained=""false"" isQuery=""false"" isFriendKey=""false"" isLazyLoad=""false"" isRelationKey=""false"" isIndexProperty=""false"" isIndexPropertyDesc=""false"" isSerializationIgnore=""false"" mappingName=""ID"" mappingColumnType=""System.Int32"" sqlType=""int"" isPrimaryKey=""true"" isNotNull=""true"" />
    <Property name=""Name"" type=""System.String"" isInherited=""false"" isReadOnly=""false"" isCompoundUnit=""false"" isContained=""false"" isQuery=""false"" isFriendKey=""false"" isLazyLoad=""false"" isRelationKey=""false"" isIndexProperty=""false"" isIndexPropertyDesc=""false"" isSerializationIgnore=""false"" mappingName=""Name"" mappingColumnType=""System.String"" sqlType=""nvarchar(50)"" isPrimaryKey=""false"" isNotNull=""false"" />
  </Properties>
</EntityConfiguration>")]
        public partial class PrivilegeOwner : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _PrivilegeOwnerEntityConfiguration;
            
            protected int _ID;
            
            protected string _Name;
            
            public static @__Columns _ = new @__Columns();
            
    		public static bool operator ==(global::Entities.PrivilegeOwner left, global::Entities.PrivilegeOwner right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.PrivilegeOwner left, global::Entities.PrivilegeOwner right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int ID {
                get {
                    return this._ID;
                }
                set {
                    this.OnPropertyChanged("ID", this._ID, value);
                    this._ID = value;
                }
            }
            
            public string Name {
                get {
                    return this._Name;
                }
                set {
                    this.OnPropertyChanged("Name", this._Name, value);
                    this._Name = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((PrivilegeOwner._PrivilegeOwnerEntityConfiguration == null)) {
                    PrivilegeOwner._PrivilegeOwnerEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.PrivilegeOwner");
                }
                return PrivilegeOwner._PrivilegeOwnerEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.PrivilegeOwner).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.PrivilegeOwner)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.PrivilegeOwner)(obj)).ID));
            }
            
            public static @__Columns @__Alias(string aliasName) {
                return new @__Columns(aliasName);
            }
            
            public class @__Columns {
                
                protected string aliasName;
                
                protected NBear.Common.PropertyItem _ID = new NBear.Common.PropertyItem("ID", "Entities.PrivilegeOwner");
                
                protected NBear.Common.PropertyItem _Name = new NBear.Common.PropertyItem("Name", "Entities.PrivilegeOwner");
                
                public @__Columns() {
                }
                
                public @__Columns(string aliasName) {
                    this.aliasName = aliasName;
                }
                
                public NBear.Common.PropertyItem ID {
                    get {
                        if ((aliasName == null)) {
                            return _ID;
                        }
                        else {
                            return new NBear.Common.PropertyItem("ID", _ID.EntityConfiguration, _ID.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem Name {
                    get {
                        if ((aliasName == null)) {
                            return _Name;
                        }
                        else {
                            return new NBear.Common.PropertyItem("Name", _Name.EntityConfiguration, _Name.PropertyConfiguration, aliasName);
                        }
                    }
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class UserGroupArrayList : NBear.Common.EntityArrayList<Entities.UserGroup> {
        }
        
        [System.SerializableAttribute()]
        [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Entities.UserGroup\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBatchUpdate" +
        "=\"false\" isRelation=\"false\" baseType=\"Entities.PrivilegeOwner\" mappingName=\"User" +
        "Group\" batchSize=\"10\">\r\n  <Properties>\r\n    <Property name=\"ID\" type=\"System.Int" +
        "32\" isInherited=\"true\" inheritEntityMappingName=\"PrivilegeOwner\" isReadOnly=\"fal" +
        "se\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"fals" +
        "e\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPrope" +
        "rtyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ID\" mappingColumnType" +
        "=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true\" isNotNull=\"true\" />\r\n    <Prop" +
        "erty name=\"Name\" type=\"System.String\" isInherited=\"true\" inheritEntityMappingNam" +
        "e=\"PrivilegeOwner\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\"" +
        " isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" is" +
        "IndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" " +
        "mappingName=\"Name\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(50)\" isPr" +
        "imaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Comment\" type=\"System" +
        ".String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContain" +
        "ed=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=" +
        "\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnor" +
        "e=\"false\" mappingName=\"Comment\" mappingColumnType=\"System.String\" sqlType=\"nvarc" +
        "har(255)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityCo" +
        "nfiguration>")]
        public partial class UserGroup : Entities.PrivilegeOwner {
            
            protected static NBear.Common.EntityConfiguration _UserGroupEntityConfiguration;
            
            protected string _Comment;
            
            public new static @__Columns _ = new @__Columns();
            
    		public static bool operator ==(global::Entities.UserGroup left, global::Entities.UserGroup right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.UserGroup left, global::Entities.UserGroup right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public string Comment {
                get {
                    return this._Comment;
                }
                set {
                    this.OnPropertyChanged("Comment", this._Comment, value);
                    this._Comment = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((UserGroup._UserGroupEntityConfiguration == null)) {
                    UserGroup._UserGroupEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.UserGroup");
                }
                return UserGroup._UserGroupEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                base.ReloadQueries(includeLazyLoadQueries);
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name,
                        this._Comment};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._Comment = reader.GetString(2);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._Comment = ((string)(row[2]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.UserGroup).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.UserGroup)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.UserGroup)(obj)).ID));
            }
            
            public new static @__Columns @__Alias(string aliasName) {
                return new @__Columns(aliasName);
            }
            
            new public class @__Columns : global::Entities.PrivilegeOwner.@__Columns {
                
                protected NBear.Common.PropertyItem _Comment = new NBear.Common.PropertyItem("Comment", "Entities.UserGroup");
                
                public @__Columns() {
                }
                
                public @__Columns(string aliasName) {
                    this.aliasName = aliasName;
                }
                
                public NBear.Common.PropertyItem Comment {
                    get {
                        if ((aliasName == null)) {
                            return _Comment;
                        }
                        else {
                            return new NBear.Common.PropertyItem("Comment", _Comment.EntityConfiguration, _Comment.PropertyConfiguration, aliasName);
                        }
                    }
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class UserArrayList : NBear.Common.EntityArrayList<Entities.User> {
        }
        
        [System.SerializableAttribute()]
        [NBear.Common.EmbeddedEntityConfigurationAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<EntityConfiguration xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" name=""Entities.User"" isReadOnly=""false"" isAutoPreLoad=""false"" isBatchUpdate=""false"" isRelation=""false"" baseType=""Entities.PrivilegeOwner"" mappingName=""User"" batchSize=""10"">
  <Properties>
    <Property name=""ID"" type=""System.Int32"" isInherited=""true"" inheritEntityMappingName=""PrivilegeOwner"" isReadOnly=""false"" isCompoundUnit=""false"" isContained=""false"" isQuery=""false"" isFriendKey=""false"" isLazyLoad=""false"" isRelationKey=""false"" isIndexProperty=""false"" isIndexPropertyDesc=""false"" isSerializationIgnore=""false"" mappingName=""ID"" mappingColumnType=""System.Int32"" sqlType=""int"" isPrimaryKey=""true"" isNotNull=""true"" />
    <Property name=""Name"" type=""System.String"" isInherited=""true"" inheritEntityMappingName=""PrivilegeOwner"" isReadOnly=""false"" isCompoundUnit=""false"" isContained=""false"" isQuery=""false"" isFriendKey=""false"" isLazyLoad=""false"" isRelationKey=""false"" isIndexProperty=""false"" isIndexPropertyDesc=""false"" isSerializationIgnore=""false"" mappingName=""Name"" mappingColumnType=""System.String"" sqlType=""nvarchar(50)"" isPrimaryKey=""false"" isNotNull=""false"" />
  </Properties>
</EntityConfiguration>")]
        public partial class User : Entities.PrivilegeOwner {
            
            protected static NBear.Common.EntityConfiguration _UserEntityConfiguration;
            
            public new static @__Columns _ = new @__Columns();
            
    		public static bool operator ==(global::Entities.User left, global::Entities.User right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.User left, global::Entities.User right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((User._UserEntityConfiguration == null)) {
                    User._UserEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.User");
                }
                return User._UserEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                base.ReloadQueries(includeLazyLoadQueries);
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.User).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.User)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.User)(obj)).ID));
            }
            
            public new static @__Columns @__Alias(string aliasName) {
                return new @__Columns(aliasName);
            }
            
            new public class @__Columns : global::Entities.PrivilegeOwner.@__Columns {
                
                public @__Columns() {
                }
                
                public @__Columns(string aliasName) {
                    this.aliasName = aliasName;
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class GhostUserArrayList : NBear.Common.EntityArrayList<Entities.GhostUser> {
        }
        
        [System.SerializableAttribute()]
        [NBear.Common.EmbeddedEntityConfigurationAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<EntityConfiguration xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" name=""Entities.GhostUser"" isReadOnly=""false"" isAutoPreLoad=""false"" isBatchUpdate=""false"" isRelation=""false"" baseType=""Entities.User"" mappingName=""GhostUser"" batchSize=""10"">
  <Properties>
    <Property name=""ID"" type=""System.Int32"" isInherited=""true"" inheritEntityMappingName=""PrivilegeOwner"" isReadOnly=""false"" isCompoundUnit=""false"" isContained=""false"" isQuery=""false"" isFriendKey=""false"" isLazyLoad=""false"" isRelationKey=""false"" isIndexProperty=""false"" isIndexPropertyDesc=""false"" isSerializationIgnore=""false"" mappingName=""ID"" mappingColumnType=""System.Int32"" sqlType=""int"" isPrimaryKey=""true"" isNotNull=""true"" />
    <Property name=""Name"" type=""System.String"" isInherited=""true"" inheritEntityMappingName=""PrivilegeOwner"" isReadOnly=""false"" isCompoundUnit=""false"" isContained=""false"" isQuery=""false"" isFriendKey=""false"" isLazyLoad=""false"" isRelationKey=""false"" isIndexProperty=""false"" isIndexPropertyDesc=""false"" isSerializationIgnore=""false"" mappingName=""Name"" mappingColumnType=""System.String"" sqlType=""nvarchar(50)"" isPrimaryKey=""false"" isNotNull=""false"" />
  </Properties>
</EntityConfiguration>")]
        public partial class GhostUser : Entities.User {
            
            protected static NBear.Common.EntityConfiguration _GhostUserEntityConfiguration;
            
            public new static @__Columns _ = new @__Columns();
            
    		public static bool operator ==(global::Entities.GhostUser left, global::Entities.GhostUser right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.GhostUser left, global::Entities.GhostUser right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((GhostUser._GhostUserEntityConfiguration == null)) {
                    GhostUser._GhostUserEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.GhostUser");
                }
                return GhostUser._GhostUserEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                base.ReloadQueries(includeLazyLoadQueries);
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.GhostUser).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.GhostUser)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.GhostUser)(obj)).ID));
            }
            
            public new static @__Columns @__Alias(string aliasName) {
                return new @__Columns(aliasName);
            }
            
            new public class @__Columns : global::Entities.User.@__Columns {
                
                public @__Columns() {
                }
                
                public @__Columns(string aliasName) {
                    this.aliasName = aliasName;
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class LocalUserArrayList : NBear.Common.EntityArrayList<Entities.LocalUser> {
        }
        
        [System.SerializableAttribute()]
        [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Entities.LocalUser\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBatchUpdate" +
        "=\"false\" isRelation=\"false\" baseType=\"Entities.User\" mappingName=\"LocalUser\" bat" +
        "chSize=\"10\">\r\n  <Properties>\r\n    <Property name=\"ID\" type=\"System.Int32\" isInhe" +
        "rited=\"true\" inheritEntityMappingName=\"PrivilegeOwner\" isReadOnly=\"false\" isComp" +
        "oundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyL" +
        "oad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"f" +
        "alse\" isSerializationIgnore=\"false\" mappingName=\"ID\" mappingColumnType=\"System.I" +
        "nt32\" sqlType=\"int\" isPrimaryKey=\"true\" isNotNull=\"true\" />\r\n    <Property name=" +
        "\"Name\" type=\"System.String\" isInherited=\"true\" inheritEntityMappingName=\"Privile" +
        "geOwner\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"" +
        "false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPrope" +
        "rty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNam" +
        "e=\"Name\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(50)\" isPrimaryKey=\"" +
        "false\" isNotNull=\"false\" />\r\n    <Property name=\"LoginID\" type=\"System.String\" i" +
        "sInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\"" +
        " isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" is" +
        "IndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" " +
        "mappingName=\"LoginID\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(50)\" i" +
        "sPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Password\" type=\"Sy" +
        "stem.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isCon" +
        "tained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelation" +
        "Key=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationI" +
        "gnore=\"false\" mappingName=\"Password\" mappingColumnType=\"System.String\" sqlType=\"" +
        "nvarchar(50)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</Enti" +
        "tyConfiguration>")]
        public partial class LocalUser : Entities.User {
            
            protected static NBear.Common.EntityConfiguration _LocalUserEntityConfiguration;
            
            protected string _LoginID;
            
            protected string _Password;
            
            public new static @__Columns _ = new @__Columns();
            
    		public static bool operator ==(global::Entities.LocalUser left, global::Entities.LocalUser right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.LocalUser left, global::Entities.LocalUser right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public string LoginID {
                get {
                    return this._LoginID;
                }
                set {
                    this.OnPropertyChanged("LoginID", this._LoginID, value);
                    this._LoginID = value;
                }
            }
            
            public string Password {
                get {
                    return this._Password;
                }
                set {
                    this.OnPropertyChanged("Password", this._Password, value);
                    this._Password = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((LocalUser._LocalUserEntityConfiguration == null)) {
                    LocalUser._LocalUserEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.LocalUser");
                }
                return LocalUser._LocalUserEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                base.ReloadQueries(includeLazyLoadQueries);
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name,
                        this._LoginID,
                        this._Password};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._LoginID = reader.GetString(2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._Password = reader.GetString(3);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._LoginID = ((string)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._Password = ((string)(row[3]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.LocalUser).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.LocalUser)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.LocalUser)(obj)).ID));
            }
            
            public new static @__Columns @__Alias(string aliasName) {
                return new @__Columns(aliasName);
            }
            
            new public class @__Columns : global::Entities.User.@__Columns {
                
                protected NBear.Common.PropertyItem _LoginID = new NBear.Common.PropertyItem("LoginID", "Entities.LocalUser");
                
                protected NBear.Common.PropertyItem _Password = new NBear.Common.PropertyItem("Password", "Entities.LocalUser");
                
                public @__Columns() {
                }
                
                public @__Columns(string aliasName) {
                    this.aliasName = aliasName;
                }
                
                public NBear.Common.PropertyItem LoginID {
                    get {
                        if ((aliasName == null)) {
                            return _LoginID;
                        }
                        else {
                            return new NBear.Common.PropertyItem("LoginID", _LoginID.EntityConfiguration, _LoginID.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem Password {
                    get {
                        if ((aliasName == null)) {
                            return _Password;
                        }
                        else {
                            return new NBear.Common.PropertyItem("Password", _Password.EntityConfiguration, _Password.PropertyConfiguration, aliasName);
                        }
                    }
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class AgentUserArrayList : NBear.Common.EntityArrayList<Entities.AgentUser> {
        }
        
        [System.SerializableAttribute()]
        [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Entities.AgentUser\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBatchUpdate" +
        "=\"false\" isRelation=\"false\" baseType=\"Entities.User\" mappingName=\"AgentUser\" bat" +
        "chSize=\"10\">\r\n  <Properties>\r\n    <Property name=\"ID\" type=\"System.Int32\" isInhe" +
        "rited=\"true\" inheritEntityMappingName=\"PrivilegeOwner\" isReadOnly=\"false\" isComp" +
        "oundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyL" +
        "oad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"f" +
        "alse\" isSerializationIgnore=\"false\" mappingName=\"ID\" mappingColumnType=\"System.I" +
        "nt32\" sqlType=\"int\" isPrimaryKey=\"true\" isNotNull=\"true\" />\r\n    <Property name=" +
        "\"Name\" type=\"System.String\" isInherited=\"true\" inheritEntityMappingName=\"Privile" +
        "geOwner\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"" +
        "false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPrope" +
        "rty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNam" +
        "e=\"Name\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(50)\" isPrimaryKey=\"" +
        "false\" isNotNull=\"false\" />\r\n    <Property name=\"LoginID\" type=\"System.String\" i" +
        "sInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\"" +
        " isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" is" +
        "IndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" " +
        "mappingName=\"LoginID\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(50)\" i" +
        "sPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration" +
        ">")]
        public partial class AgentUser : Entities.User {
            
            protected static NBear.Common.EntityConfiguration _AgentUserEntityConfiguration;
            
            protected string _LoginID;
            
            public new static @__Columns _ = new @__Columns();
            
    		public static bool operator ==(global::Entities.AgentUser left, global::Entities.AgentUser right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.AgentUser left, global::Entities.AgentUser right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public string LoginID {
                get {
                    return this._LoginID;
                }
                set {
                    this.OnPropertyChanged("LoginID", this._LoginID, value);
                    this._LoginID = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((AgentUser._AgentUserEntityConfiguration == null)) {
                    AgentUser._AgentUserEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.AgentUser");
                }
                return AgentUser._AgentUserEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                base.ReloadQueries(includeLazyLoadQueries);
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name,
                        this._LoginID};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._LoginID = reader.GetString(2);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._LoginID = ((string)(row[2]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.AgentUser).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.AgentUser)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.AgentUser)(obj)).ID));
            }
            
            public new static @__Columns @__Alias(string aliasName) {
                return new @__Columns(aliasName);
            }
            
            new public class @__Columns : global::Entities.User.@__Columns {
                
                protected NBear.Common.PropertyItem _LoginID = new NBear.Common.PropertyItem("LoginID", "Entities.AgentUser");
                
                public @__Columns() {
                }
                
                public @__Columns(string aliasName) {
                    this.aliasName = aliasName;
                }
                
                public NBear.Common.PropertyItem LoginID {
                    get {
                        if ((aliasName == null)) {
                            return _LoginID;
                        }
                        else {
                            return new NBear.Common.PropertyItem("LoginID", _LoginID.EntityConfiguration, _LoginID.PropertyConfiguration, aliasName);
                        }
                    }
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class OrderArrayList : NBear.Common.EntityArrayList<Entities.Order> {
        }
        
        [System.SerializableAttribute()]
        [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Entities.Order\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBatchUpdate=\"fa" +
        "lse\" isRelation=\"false\" mappingName=\"Orders\" batchSize=\"10\">\r\n  <Properties>\r\n  " +
        "  <Property name=\"OrderID\" type=\"System.Int32\" isInherited=\"false\" isReadOnly=\"t" +
        "rue\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"fal" +
        "se\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProp" +
        "ertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"OrderID\" mappingColu" +
        "mnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true\" isNotNull=\"true\" />\r\n   " +
        " <Property name=\"CustomerID\" type=\"System.String\" isInherited=\"false\" isReadOnly" +
        "=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=" +
        "\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndex" +
        "PropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"CustomerID\" mapp" +
        "ingColumnType=\"System.String\" sqlType=\"nvarchar(127)\" isPrimaryKey=\"false\" isNot" +
        "Null=\"false\" />\r\n    <Property name=\"EmployeeID\" type=\"System.Int32\" isInherited" +
        "=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"" +
        "false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPrope" +
        "rty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNam" +
        "e=\"EmployeeID\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"fals" +
        "e\" isNotNull=\"false\" />\r\n    <Property name=\"OrderDate\" type=\"System.DateTime\" i" +
        "sInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\"" +
        " isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" is" +
        "IndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" " +
        "mappingName=\"OrderDate\" mappingColumnType=\"System.DateTime\" sqlType=\"datetime\" i" +
        "sPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"RequiredDate\" type" +
        "=\"System.DateTime\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\"" +
        " isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRe" +
        "lationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializ" +
        "ationIgnore=\"false\" mappingName=\"RequiredDate\" mappingColumnType=\"System.DateTim" +
        "e\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property n" +
        "ame=\"ShippedDate\" type=\"System.DateTime\" isInherited=\"false\" isReadOnly=\"false\" " +
        "isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" i" +
        "sLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyD" +
        "esc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ShippedDate\" mappingColum" +
        "nType=\"System.DateTime\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false" +
        "\" />\r\n    <Property name=\"ShipVia\" type=\"System.Int32\" isInherited=\"false\" isRea" +
        "dOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrien" +
        "dKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" is" +
        "IndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ShipVia\" ma" +
        "ppingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"fal" +
        "se\" />\r\n    <Property name=\"Freight\" type=\"System.Decimal\" isInherited=\"false\" i" +
        "sReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isF" +
        "riendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false" +
        "\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Freight" +
        "\" mappingColumnType=\"System.Decimal\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNo" +
        "tNull=\"false\" />\r\n    <Property name=\"ShipName\" type=\"System.String\" isInherited" +
        "=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"" +
        "false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPrope" +
        "rty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNam" +
        "e=\"ShipName\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(127)\" isPrimary" +
        "Key=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ShipAddress\" type=\"System." +
        "String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContaine" +
        "d=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"" +
        "false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore" +
        "=\"false\" mappingName=\"ShipAddress\" mappingColumnType=\"System.String\" sqlType=\"nv" +
        "archar(127)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Ship" +
        "City\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit" +
        "=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"fal" +
        "se\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" is" +
        "SerializationIgnore=\"false\" mappingName=\"ShipCity\" mappingColumnType=\"System.Str" +
        "ing\" sqlType=\"nvarchar(127)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Pro" +
        "perty name=\"ShipRegion\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"fal" +
        "se\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"fals" +
        "e\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPrope" +
        "rtyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ShipRegion\" mappingCo" +
        "lumnType=\"System.String\" sqlType=\"nvarchar(127)\" isPrimaryKey=\"false\" isNotNull=" +
        "\"false\" />\r\n    <Property name=\"ShipPostalCode\" type=\"System.String\" isInherited" +
        "=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"" +
        "false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPrope" +
        "rty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNam" +
        "e=\"ShipPostalCode\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(127)\" isP" +
        "rimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ShipCountry\" type=\"S" +
        "ystem.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isCo" +
        "ntained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelatio" +
        "nKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerialization" +
        "Ignore=\"false\" mappingName=\"ShipCountry\" mappingColumnType=\"System.String\" sqlTy" +
        "pe=\"nvarchar(127)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n<" +
        "/EntityConfiguration>")]
        public partial class Order : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _OrderEntityConfiguration;
            
            protected int _OrderID;
            
            protected string _CustomerID;
            
            protected int _EmployeeID;
            
            protected global::System.DateTime _OrderDate;
            
            protected global::System.DateTime _RequiredDate;
            
            protected global::System.DateTime _ShippedDate;
            
            protected int _ShipVia;
            
            protected decimal _Freight;
            
            protected string _ShipName;
            
            protected string _ShipAddress;
            
            protected string _ShipCity;
            
            protected string _ShipRegion;
            
            protected string _ShipPostalCode;
            
            protected string _ShipCountry;
            
            public static @__Columns _ = new @__Columns();
            
    		public static bool operator ==(global::Entities.Order left, global::Entities.Order right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.Order left, global::Entities.Order right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int OrderID {
                get {
                    return this._OrderID;
                }
                set {
                    this.OnPropertyChanged("OrderID", this._OrderID, value);
                    this._OrderID = value;
                }
            }
            
            public string CustomerID {
                get {
                    return this._CustomerID;
                }
                set {
                    this.OnPropertyChanged("CustomerID", this._CustomerID, value);
                    this._CustomerID = value;
                }
            }
            
            public int EmployeeID {
                get {
                    return this._EmployeeID;
                }
                set {
                    this.OnPropertyChanged("EmployeeID", this._EmployeeID, value);
                    this._EmployeeID = value;
                }
            }
            
            public global::System.DateTime OrderDate {
                get {
                    return this._OrderDate;
                }
                set {
                    this.OnPropertyChanged("OrderDate", this._OrderDate, value);
                    this._OrderDate = value;
                }
            }
            
            public global::System.DateTime RequiredDate {
                get {
                    return this._RequiredDate;
                }
                set {
                    this.OnPropertyChanged("RequiredDate", this._RequiredDate, value);
                    this._RequiredDate = value;
                }
            }
            
            public global::System.DateTime ShippedDate {
                get {
                    return this._ShippedDate;
                }
                set {
                    this.OnPropertyChanged("ShippedDate", this._ShippedDate, value);
                    this._ShippedDate = value;
                }
            }
            
            public int ShipVia {
                get {
                    return this._ShipVia;
                }
                set {
                    this.OnPropertyChanged("ShipVia", this._ShipVia, value);
                    this._ShipVia = value;
                }
            }
            
            public decimal Freight {
                get {
                    return this._Freight;
                }
                set {
                    this.OnPropertyChanged("Freight", this._Freight, value);
                    this._Freight = value;
                }
            }
            
            public string ShipName {
                get {
                    return this._ShipName;
                }
                set {
                    this.OnPropertyChanged("ShipName", this._ShipName, value);
                    this._ShipName = value;
                }
            }
            
            public string ShipAddress {
                get {
                    return this._ShipAddress;
                }
                set {
                    this.OnPropertyChanged("ShipAddress", this._ShipAddress, value);
                    this._ShipAddress = value;
                }
            }
            
            public string ShipCity {
                get {
                    return this._ShipCity;
                }
                set {
                    this.OnPropertyChanged("ShipCity", this._ShipCity, value);
                    this._ShipCity = value;
                }
            }
            
            public string ShipRegion {
                get {
                    return this._ShipRegion;
                }
                set {
                    this.OnPropertyChanged("ShipRegion", this._ShipRegion, value);
                    this._ShipRegion = value;
                }
            }
            
            public string ShipPostalCode {
                get {
                    return this._ShipPostalCode;
                }
                set {
                    this.OnPropertyChanged("ShipPostalCode", this._ShipPostalCode, value);
                    this._ShipPostalCode = value;
                }
            }
            
            public string ShipCountry {
                get {
                    return this._ShipCountry;
                }
                set {
                    this.OnPropertyChanged("ShipCountry", this._ShipCountry, value);
                    this._ShipCountry = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((Order._OrderEntityConfiguration == null)) {
                    Order._OrderEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.Order");
                }
                return Order._OrderEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._OrderID,
                        this._CustomerID,
                        this._EmployeeID,
                        this._OrderDate,
                        this._RequiredDate,
                        this._ShippedDate,
                        this._ShipVia,
                        this._Freight,
                        this._ShipName,
                        this._ShipAddress,
                        this._ShipCity,
                        this._ShipRegion,
                        this._ShipPostalCode,
                        this._ShipCountry};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._OrderID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._CustomerID = reader.GetString(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._EmployeeID = reader.GetInt32(2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._OrderDate = this.GetDateTime(reader, 3);
                }
                if ((false == reader.IsDBNull(4))) {
                    this._RequiredDate = this.GetDateTime(reader, 4);
                }
                if ((false == reader.IsDBNull(5))) {
                    this._ShippedDate = this.GetDateTime(reader, 5);
                }
                if ((false == reader.IsDBNull(6))) {
                    this._ShipVia = reader.GetInt32(6);
                }
                if ((false == reader.IsDBNull(7))) {
                    this._Freight = reader.GetDecimal(7);
                }
                if ((false == reader.IsDBNull(8))) {
                    this._ShipName = reader.GetString(8);
                }
                if ((false == reader.IsDBNull(9))) {
                    this._ShipAddress = reader.GetString(9);
                }
                if ((false == reader.IsDBNull(10))) {
                    this._ShipCity = reader.GetString(10);
                }
                if ((false == reader.IsDBNull(11))) {
                    this._ShipRegion = reader.GetString(11);
                }
                if ((false == reader.IsDBNull(12))) {
                    this._ShipPostalCode = reader.GetString(12);
                }
                if ((false == reader.IsDBNull(13))) {
                    this._ShipCountry = reader.GetString(13);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._OrderID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._CustomerID = ((string)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._EmployeeID = ((int)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._OrderDate = this.GetDateTime(row, 3);
                }
                if ((false == row.IsNull(4))) {
                    this._RequiredDate = this.GetDateTime(row, 4);
                }
                if ((false == row.IsNull(5))) {
                    this._ShippedDate = this.GetDateTime(row, 5);
                }
                if ((false == row.IsNull(6))) {
                    this._ShipVia = ((int)(row[6]));
                }
                if ((false == row.IsNull(7))) {
                    this._Freight = ((decimal)(row[7]));
                }
                if ((false == row.IsNull(8))) {
                    this._ShipName = ((string)(row[8]));
                }
                if ((false == row.IsNull(9))) {
                    this._ShipAddress = ((string)(row[9]));
                }
                if ((false == row.IsNull(10))) {
                    this._ShipCity = ((string)(row[10]));
                }
                if ((false == row.IsNull(11))) {
                    this._ShipRegion = ((string)(row[11]));
                }
                if ((false == row.IsNull(12))) {
                    this._ShipPostalCode = ((string)(row[12]));
                }
                if ((false == row.IsNull(13))) {
                    this._ShipCountry = ((string)(row[13]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.Order).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.Order)(obj)).isAttached) 
                            && (this.OrderID == ((global::Entities.Order)(obj)).OrderID));
            }
            
            public static @__Columns @__Alias(string aliasName) {
                return new @__Columns(aliasName);
            }
            
            public class @__Columns {
                
                protected string aliasName;
                
                protected NBear.Common.PropertyItem _OrderID = new NBear.Common.PropertyItem("OrderID", "Entities.Order");
                
                protected NBear.Common.PropertyItem _CustomerID = new NBear.Common.PropertyItem("CustomerID", "Entities.Order");
                
                protected NBear.Common.PropertyItem _EmployeeID = new NBear.Common.PropertyItem("EmployeeID", "Entities.Order");
                
                protected NBear.Common.PropertyItem _OrderDate = new NBear.Common.PropertyItem("OrderDate", "Entities.Order");
                
                protected NBear.Common.PropertyItem _RequiredDate = new NBear.Common.PropertyItem("RequiredDate", "Entities.Order");
                
                protected NBear.Common.PropertyItem _ShippedDate = new NBear.Common.PropertyItem("ShippedDate", "Entities.Order");
                
                protected NBear.Common.PropertyItem _ShipVia = new NBear.Common.PropertyItem("ShipVia", "Entities.Order");
                
                protected NBear.Common.PropertyItem _Freight = new NBear.Common.PropertyItem("Freight", "Entities.Order");
                
                protected NBear.Common.PropertyItem _ShipName = new NBear.Common.PropertyItem("ShipName", "Entities.Order");
                
                protected NBear.Common.PropertyItem _ShipAddress = new NBear.Common.PropertyItem("ShipAddress", "Entities.Order");
                
                protected NBear.Common.PropertyItem _ShipCity = new NBear.Common.PropertyItem("ShipCity", "Entities.Order");
                
                protected NBear.Common.PropertyItem _ShipRegion = new NBear.Common.PropertyItem("ShipRegion", "Entities.Order");
                
                protected NBear.Common.PropertyItem _ShipPostalCode = new NBear.Common.PropertyItem("ShipPostalCode", "Entities.Order");
                
                protected NBear.Common.PropertyItem _ShipCountry = new NBear.Common.PropertyItem("ShipCountry", "Entities.Order");
                
                public @__Columns() {
                }
                
                public @__Columns(string aliasName) {
                    this.aliasName = aliasName;
                }
                
                public NBear.Common.PropertyItem OrderID {
                    get {
                        if ((aliasName == null)) {
                            return _OrderID;
                        }
                        else {
                            return new NBear.Common.PropertyItem("OrderID", _OrderID.EntityConfiguration, _OrderID.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem CustomerID {
                    get {
                        if ((aliasName == null)) {
                            return _CustomerID;
                        }
                        else {
                            return new NBear.Common.PropertyItem("CustomerID", _CustomerID.EntityConfiguration, _CustomerID.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem EmployeeID {
                    get {
                        if ((aliasName == null)) {
                            return _EmployeeID;
                        }
                        else {
                            return new NBear.Common.PropertyItem("EmployeeID", _EmployeeID.EntityConfiguration, _EmployeeID.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem OrderDate {
                    get {
                        if ((aliasName == null)) {
                            return _OrderDate;
                        }
                        else {
                            return new NBear.Common.PropertyItem("OrderDate", _OrderDate.EntityConfiguration, _OrderDate.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem RequiredDate {
                    get {
                        if ((aliasName == null)) {
                            return _RequiredDate;
                        }
                        else {
                            return new NBear.Common.PropertyItem("RequiredDate", _RequiredDate.EntityConfiguration, _RequiredDate.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem ShippedDate {
                    get {
                        if ((aliasName == null)) {
                            return _ShippedDate;
                        }
                        else {
                            return new NBear.Common.PropertyItem("ShippedDate", _ShippedDate.EntityConfiguration, _ShippedDate.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem ShipVia {
                    get {
                        if ((aliasName == null)) {
                            return _ShipVia;
                        }
                        else {
                            return new NBear.Common.PropertyItem("ShipVia", _ShipVia.EntityConfiguration, _ShipVia.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem Freight {
                    get {
                        if ((aliasName == null)) {
                            return _Freight;
                        }
                        else {
                            return new NBear.Common.PropertyItem("Freight", _Freight.EntityConfiguration, _Freight.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem ShipName {
                    get {
                        if ((aliasName == null)) {
                            return _ShipName;
                        }
                        else {
                            return new NBear.Common.PropertyItem("ShipName", _ShipName.EntityConfiguration, _ShipName.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem ShipAddress {
                    get {
                        if ((aliasName == null)) {
                            return _ShipAddress;
                        }
                        else {
                            return new NBear.Common.PropertyItem("ShipAddress", _ShipAddress.EntityConfiguration, _ShipAddress.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem ShipCity {
                    get {
                        if ((aliasName == null)) {
                            return _ShipCity;
                        }
                        else {
                            return new NBear.Common.PropertyItem("ShipCity", _ShipCity.EntityConfiguration, _ShipCity.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem ShipRegion {
                    get {
                        if ((aliasName == null)) {
                            return _ShipRegion;
                        }
                        else {
                            return new NBear.Common.PropertyItem("ShipRegion", _ShipRegion.EntityConfiguration, _ShipRegion.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem ShipPostalCode {
                    get {
                        if ((aliasName == null)) {
                            return _ShipPostalCode;
                        }
                        else {
                            return new NBear.Common.PropertyItem("ShipPostalCode", _ShipPostalCode.EntityConfiguration, _ShipPostalCode.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem ShipCountry {
                    get {
                        if ((aliasName == null)) {
                            return _ShipCountry;
                        }
                        else {
                            return new NBear.Common.PropertyItem("ShipCountry", _ShipCountry.EntityConfiguration, _ShipCountry.PropertyConfiguration, aliasName);
                        }
                    }
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class TestUserArrayList : NBear.Common.EntityArrayList<Entities.TestUser> {
        }
        
        [System.SerializableAttribute()]
        [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Entities.TestUser\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBatchUpdate=" +
        "\"false\" isRelation=\"false\" mappingName=\"UserTable\" batchSize=\"10\">\r\n  <Propertie" +
        "s>\r\n    <Property name=\"ID\" type=\"System.Int32\" isInherited=\"false\" isReadOnly=\"" +
        "true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"fa" +
        "lse\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPro" +
        "pertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ID\" mappingColumnTy" +
        "pe=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true\" isNotNull=\"true\" />\r\n    <Pr" +
        "operty name=\"Name\" type=\"System.Nullable`1[NBear.Test.UnitTests.temp.EntityDesig" +
        "nTemp1.UserName]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"true\" i" +
        "sContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRela" +
        "tionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializat" +
        "ionIgnore=\"false\" mappingName=\"UserName\" mappingColumnType=\"System.Nullable`1[NB" +
        "ear.Test.UnitTests.temp.EntityDesignTemp1.UserName]\" sqlType=\"nvarchar(50)\" isPr" +
        "imaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Type\" type=\"NBear.Tes" +
        "t.UnitTests.temp.EntityDesignTemp1.UserType\" isInherited=\"false\" isReadOnly=\"fal" +
        "se\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"fals" +
        "e\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPrope" +
        "rtyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Type\" mappingColumnTy" +
        "pe=\"NBear.Test.UnitTests.temp.EntityDesignTemp1.UserType\" sqlType=\"int\" isPrimar" +
        "yKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"TypeDesc\" type=\"Entities." +
        "TypeDescription\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" i" +
        "sContained=\"false\" isQuery=\"true\" isFriendKey=\"false\" isLazyLoad=\"true\" queryWhe" +
        "re=\"{TypeID} = @Type\" queryType=\"CustomQuery\" queryOrderBy=\"{TypeID} DESC\" isRel" +
        "ationKey=\"false\" relatedType=\"Entities.TypeDescription\" isIndexProperty=\"false\" " +
        "isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"TypeDesc\"" +
        " mappingColumnType=\"Entities.TypeDescription\" sqlType=\"ntext\" isPrimaryKey=\"fals" +
        "e\" isNotNull=\"false\" />\r\n    <Property name=\"Addrs\" type=\"Entities.AddressArrayL" +
        "ist\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"" +
        "false\" isQuery=\"true\" isFriendKey=\"false\" isLazyLoad=\"true\" queryWhere=\"{UserID}" +
        " = @UserID\" queryType=\"CustomQuery\" isRelationKey=\"false\" relatedType=\"Entities." +
        "Address\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgno" +
        "re=\"false\" mappingName=\"Addrs\" mappingColumnType=\"Entities.AddressArrayList\" sql" +
        "Type=\"ntext\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</Entit" +
        "yConfiguration>")]
        public partial class TestUser : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _TestUserEntityConfiguration;
            
            protected int _ID;
            
            protected string _Name;
            
            protected global::NBear.Test.UnitTests.temp.EntityDesignTemp1.UserType _Type;
            
            protected global::Entities.TypeDescription _TypeDesc;
            
            protected global::Entities.AddressArrayList _Addrs;
            
            public static @__Columns _ = new @__Columns();
            
    		public static bool operator ==(global::Entities.TestUser left, global::Entities.TestUser right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.TestUser left, global::Entities.TestUser right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int ID {
                get {
                    return this._ID;
                }
                set {
                    this.OnPropertyChanged("ID", this._ID, value);
                    this._ID = value;
                }
            }
            
            public global::NBear.Test.UnitTests.temp.EntityDesignTemp1.UserName? Name {
                get {
                    return ((NBear.Test.UnitTests.temp.EntityDesignTemp1.UserName)(NBear.Common.SerializationManager.Deserialize(typeof(NBear.Test.UnitTests.temp.EntityDesignTemp1.UserName), this._Name)));
                }
                set {
                    this.OnPropertyChanged("Name", this._Name, value);
                    this._Name = NBear.Common.SerializationManager.Serialize(value);
                }
            }
            
            public global::NBear.Test.UnitTests.temp.EntityDesignTemp1.UserType Type {
                get {
                    return this._Type;
                }
                set {
                    this.OnPropertyChanged("Type", this._Type, value);
                    this._Type = value;
                }
            }
            
            public global::Entities.TypeDescription TypeDesc {
                get {
                    if (this.IsQueryPropertyLoaded("TypeDesc")) {
                    }
                    else {
                        global::Entities.TypeDescription _obj;
                        _obj = ((global::Entities.TypeDescription)(this.QueryOne(typeof(global::Entities.TypeDescription), "TypeDesc", this)));
                        this.OnQueryOnePropertyChanged("TypeDesc", this._TypeDesc, _obj);
                        this._TypeDesc = _obj;
                    }
                    return this._TypeDesc;
                }
                set {
                    this.OnQueryOnePropertyChanged("TypeDesc", this.TypeDesc, value);
                    this._TypeDesc = value;
                }
            }
            
            public global::Entities.AddressArrayList Addrs {
                get {
                    if (this.IsQueryPropertyLoaded("Addrs")) {
                    }
                    else {
                        global::Entities.AddressArrayList _a1;
                        _a1 = new Entities.AddressArrayList();
                        _a1.AddRange(((global::Entities.Address[])(this.Query(typeof(global::Entities.Address), "Addrs", this))));
                        this.OnQueryPropertyChanged("Addrs", this._Addrs, _a1);
                        this._Addrs = _a1;
                    }
                    if ((this._Addrs == null)) {
                        global::Entities.AddressArrayList _a1;
                        _a1 = new global::Entities.AddressArrayList();
                        this.BindArrayListEventHandlers("Addrs", _a1);
                        this._Addrs = _a1;
                    }
                    return this._Addrs;
                }
                set {
                    this.OnQueryPropertyChanged("Addrs", this.Addrs, value);
                    this._Addrs = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((TestUser._TestUserEntityConfiguration == null)) {
                    TestUser._TestUserEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.TestUser");
                }
                return TestUser._TestUserEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("Entities.TestUser", "TypeDesc")))) {
                    global::Entities.TypeDescription _obj;
                    _obj = ((global::Entities.TypeDescription)(this.QueryOne(typeof(global::Entities.TypeDescription), "TypeDesc", this)));
                    this.OnQueryOnePropertyChanged("TypeDesc", this._TypeDesc, _obj);
                    this._TypeDesc = _obj;
                }
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("Entities.TestUser", "Addrs")))) {
                    global::Entities.AddressArrayList _a1;
                    _a1 = new Entities.AddressArrayList();
                    _a1.AddRange(((global::Entities.Address[])(this.Query(typeof(global::Entities.Address), "Addrs", this))));
                    this.OnQueryPropertyChanged("Addrs", this._Addrs, _a1);
                    this._Addrs = _a1;
                }
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name,
                        this._Type};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._Type = ((NBear.Test.UnitTests.temp.EntityDesignTemp1.UserType)(reader.GetValue(2)));
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._Type = ((NBear.Test.UnitTests.temp.EntityDesignTemp1.UserType)(row[2]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.TestUser).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.TestUser)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.TestUser)(obj)).ID));
            }
            
            public static @__Columns @__Alias(string aliasName) {
                return new @__Columns(aliasName);
            }
            
            public class @__Columns {
                
                protected string aliasName;
                
                protected NBear.Common.PropertyItem _ID = new NBear.Common.PropertyItem("ID", "Entities.TestUser");
                
                protected NBear.Common.PropertyItem _Name = new NBear.Common.PropertyItem("Name", "Entities.TestUser");
                
                protected NBear.Common.PropertyItem _Type = new NBear.Common.PropertyItem("Type", "Entities.TestUser");
                
                public @__Columns() {
                }
                
                public @__Columns(string aliasName) {
                    this.aliasName = aliasName;
                }
                
                public NBear.Common.PropertyItem ID {
                    get {
                        if ((aliasName == null)) {
                            return _ID;
                        }
                        else {
                            return new NBear.Common.PropertyItem("ID", _ID.EntityConfiguration, _ID.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem Name {
                    get {
                        if ((aliasName == null)) {
                            return _Name;
                        }
                        else {
                            return new NBear.Common.PropertyItem("Name", _Name.EntityConfiguration, _Name.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem Type {
                    get {
                        if ((aliasName == null)) {
                            return _Type;
                        }
                        else {
                            return new NBear.Common.PropertyItem("Type", _Type.EntityConfiguration, _Type.PropertyConfiguration, aliasName);
                        }
                    }
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class AdminUserArrayList : NBear.Common.EntityArrayList<Entities.AdminUser> {
        }
        
        [System.SerializableAttribute()]
        [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Entities.AdminUser\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBatchUpdate" +
        "=\"false\" isRelation=\"false\" baseType=\"Entities.TestUser\" mappingName=\"AdminUser\"" +
        " batchSize=\"10\">\r\n  <Properties>\r\n    <Property name=\"ID\" type=\"System.Int32\" is" +
        "Inherited=\"true\" inheritEntityMappingName=\"UserTable\" isReadOnly=\"true\" isCompou" +
        "ndUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoa" +
        "d=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"fal" +
        "se\" isSerializationIgnore=\"false\" mappingName=\"ID\" mappingColumnType=\"System.Int" +
        "32\" sqlType=\"int\" isPrimaryKey=\"true\" isNotNull=\"true\" />\r\n    <Property name=\"N" +
        "ame\" type=\"System.Nullable`1[NBear.Test.UnitTests.temp.EntityDesignTemp1.UserNam" +
        "e]\" isInherited=\"true\" inheritEntityMappingName=\"UserTable\" isReadOnly=\"false\" i" +
        "sCompoundUnit=\"true\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isL" +
        "azyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDes" +
        "c=\"false\" isSerializationIgnore=\"false\" mappingName=\"UserName\" mappingColumnType" +
        "=\"System.Nullable`1[NBear.Test.UnitTests.temp.EntityDesignTemp1.UserName]\" sqlTy" +
        "pe=\"nvarchar(50)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=" +
        "\"Type\" type=\"NBear.Test.UnitTests.temp.EntityDesignTemp1.UserType\" isInherited=\"" +
        "true\" inheritEntityMappingName=\"UserTable\" isReadOnly=\"false\" isCompoundUnit=\"fa" +
        "lse\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" " +
        "isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSeri" +
        "alizationIgnore=\"false\" mappingName=\"Type\" mappingColumnType=\"NBear.Test.UnitTes" +
        "ts.temp.EntityDesignTemp1.UserType\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull" +
        "=\"false\" />\r\n    <Property name=\"TypeDesc\" type=\"Entities.TypeDescription\" isInh" +
        "erited=\"true\" inheritEntityMappingName=\"UserTable\" isReadOnly=\"false\" isCompound" +
        "Unit=\"false\" isContained=\"false\" isQuery=\"true\" isFriendKey=\"false\" isLazyLoad=\"" +
        "true\" queryWhere=\"{TypeID} = @Type\" queryType=\"CustomQuery\" queryOrderBy=\"{TypeI" +
        "D} DESC\" isRelationKey=\"false\" relatedType=\"Entities.TypeDescription\" isIndexPro" +
        "perty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingN" +
        "ame=\"TypeDesc\" mappingColumnType=\"Entities.TypeDescription\" sqlType=\"ntext\" isPr" +
        "imaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Addrs\" type=\"Entities" +
        ".AddressArrayList\" isInherited=\"true\" inheritEntityMappingName=\"UserTable\" isRea" +
        "dOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"true\" isFriend" +
        "Key=\"false\" isLazyLoad=\"true\" queryWhere=\"{UserID} = @UserID\" queryType=\"CustomQ" +
        "uery\" isRelationKey=\"false\" relatedType=\"Entities.Address\" isIndexProperty=\"fals" +
        "e\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Addrs\"" +
        " mappingColumnType=\"Entities.AddressArrayList\" sqlType=\"ntext\" isPrimaryKey=\"fal" +
        "se\" isNotNull=\"false\" />\r\n    <Property name=\"Password\" type=\"System.String\" isI" +
        "nherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" i" +
        "sQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIn" +
        "dexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" ma" +
        "ppingName=\"Password\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(127)\" i" +
        "sPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration" +
        ">")]
        public partial class AdminUser : Entities.TestUser {
            
            protected static NBear.Common.EntityConfiguration _AdminUserEntityConfiguration;
            
            protected string _Password;
            
            public new static @__Columns _ = new @__Columns();
            
    		public static bool operator ==(global::Entities.AdminUser left, global::Entities.AdminUser right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.AdminUser left, global::Entities.AdminUser right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public string Password {
                get {
                    return this._Password;
                }
                set {
                    this.OnPropertyChanged("Password", this._Password, value);
                    this._Password = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((AdminUser._AdminUserEntityConfiguration == null)) {
                    AdminUser._AdminUserEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.AdminUser");
                }
                return AdminUser._AdminUserEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                base.ReloadQueries(includeLazyLoadQueries);
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._Name,
                        this._Type,
                        this._Password};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Name = reader.GetString(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._Type = ((NBear.Test.UnitTests.temp.EntityDesignTemp1.UserType)(reader.GetValue(2)));
                }
                if ((false == reader.IsDBNull(3))) {
                    this._Password = reader.GetString(3);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Name = ((string)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._Type = ((NBear.Test.UnitTests.temp.EntityDesignTemp1.UserType)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._Password = ((string)(row[3]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.AdminUser).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.AdminUser)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.AdminUser)(obj)).ID));
            }
            
            public new static @__Columns @__Alias(string aliasName) {
                return new @__Columns(aliasName);
            }
            
            new public class @__Columns : global::Entities.TestUser.@__Columns {
                
                protected NBear.Common.PropertyItem _Password = new NBear.Common.PropertyItem("Password", "Entities.AdminUser");
                
                public @__Columns() {
                }
                
                public @__Columns(string aliasName) {
                    this.aliasName = aliasName;
                }
                
                public NBear.Common.PropertyItem Password {
                    get {
                        if ((aliasName == null)) {
                            return _Password;
                        }
                        else {
                            return new NBear.Common.PropertyItem("Password", _Password.EntityConfiguration, _Password.PropertyConfiguration, aliasName);
                        }
                    }
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class TypeDescriptionArrayList : NBear.Common.EntityArrayList<Entities.TypeDescription> {
        }
        
        [System.SerializableAttribute()]
        [NBear.Common.EmbeddedEntityConfigurationAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<EntityConfiguration xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" name=""Entities.TypeDescription"" isReadOnly=""false"" isAutoPreLoad=""false"" isBatchUpdate=""false"" isRelation=""false"" mappingName=""TypeDescription"" batchSize=""10"">
  <Properties>
    <Property name=""TypeID"" type=""System.Int32"" isInherited=""false"" isReadOnly=""false"" isCompoundUnit=""false"" isContained=""false"" isQuery=""false"" isFriendKey=""false"" isLazyLoad=""false"" isRelationKey=""false"" isIndexProperty=""false"" isIndexPropertyDesc=""false"" isSerializationIgnore=""false"" mappingName=""TypeID"" mappingColumnType=""System.Int32"" sqlType=""int"" isPrimaryKey=""false"" isNotNull=""false"" />
    <Property name=""Desc"" type=""System.String"" isInherited=""false"" isReadOnly=""false"" isCompoundUnit=""false"" isContained=""false"" isQuery=""false"" isFriendKey=""false"" isLazyLoad=""false"" isRelationKey=""false"" isIndexProperty=""false"" isIndexPropertyDesc=""false"" isSerializationIgnore=""false"" mappingName=""Desc"" mappingColumnType=""System.String"" sqlType=""nvarchar(127)"" isPrimaryKey=""false"" isNotNull=""false"" />
  </Properties>
</EntityConfiguration>")]
        public partial class TypeDescription : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _TypeDescriptionEntityConfiguration;
            
            protected int _TypeID;
            
            protected string _Desc;
            
            public static @__Columns _ = new @__Columns();
            
    		public static bool operator ==(global::Entities.TypeDescription left, global::Entities.TypeDescription right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.TypeDescription left, global::Entities.TypeDescription right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int TypeID {
                get {
                    return this._TypeID;
                }
                set {
                    this.OnPropertyChanged("TypeID", this._TypeID, value);
                    this._TypeID = value;
                }
            }
            
            public string Desc {
                get {
                    return this._Desc;
                }
                set {
                    this.OnPropertyChanged("Desc", this._Desc, value);
                    this._Desc = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((TypeDescription._TypeDescriptionEntityConfiguration == null)) {
                    TypeDescription._TypeDescriptionEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.TypeDescription");
                }
                return TypeDescription._TypeDescriptionEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._TypeID,
                        this._Desc};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._TypeID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._Desc = reader.GetString(1);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._TypeID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._Desc = ((string)(row[1]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.TypeDescription).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.TypeDescription)(obj)).isAttached) 
                            && base.Equals(obj));
            }
            
            public static @__Columns @__Alias(string aliasName) {
                return new @__Columns(aliasName);
            }
            
            public class @__Columns {
                
                protected string aliasName;
                
                protected NBear.Common.PropertyItem _TypeID = new NBear.Common.PropertyItem("TypeID", "Entities.TypeDescription");
                
                protected NBear.Common.PropertyItem _Desc = new NBear.Common.PropertyItem("Desc", "Entities.TypeDescription");
                
                public @__Columns() {
                }
                
                public @__Columns(string aliasName) {
                    this.aliasName = aliasName;
                }
                
                public NBear.Common.PropertyItem TypeID {
                    get {
                        if ((aliasName == null)) {
                            return _TypeID;
                        }
                        else {
                            return new NBear.Common.PropertyItem("TypeID", _TypeID.EntityConfiguration, _TypeID.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem Desc {
                    get {
                        if ((aliasName == null)) {
                            return _Desc;
                        }
                        else {
                            return new NBear.Common.PropertyItem("Desc", _Desc.EntityConfiguration, _Desc.PropertyConfiguration, aliasName);
                        }
                    }
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class AddressArrayList : NBear.Common.EntityArrayList<Entities.Address> {
        }
        
        [System.SerializableAttribute()]
        [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Entities.Address\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBatchUpdate=\"" +
        "false\" isRelation=\"false\" mappingName=\"Address\" batchSize=\"10\">\r\n  <Properties>\r" +
        "\n    <Property name=\"ID\" type=\"System.Int32\" isInherited=\"false\" isReadOnly=\"fal" +
        "se\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"fals" +
        "e\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPrope" +
        "rtyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ID\" mappingColumnType" +
        "=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true\" isNotNull=\"true\" />\r\n    <Prop" +
        "erty name=\"UserID\" type=\"System.Int32\" isInherited=\"false\" isReadOnly=\"false\" is" +
        "CompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isL" +
        "azyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDes" +
        "c=\"false\" isSerializationIgnore=\"false\" mappingName=\"UserID\" mappingColumnType=\"" +
        "System.Int32\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Prop" +
        "erty name=\"Name\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isC" +
        "ompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLa" +
        "zyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc" +
        "=\"false\" isSerializationIgnore=\"false\" mappingName=\"Name\" mappingColumnType=\"Sys" +
        "tem.String\" sqlType=\"nvarchar(127)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n " +
        "   <Property name=\"Content\" type=\"System.String\" isInherited=\"false\" isReadOnly=" +
        "\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"" +
        "false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexP" +
        "ropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Content\" mappingC" +
        "olumnType=\"System.String\" sqlType=\"nvarchar(127)\" isPrimaryKey=\"false\" isNotNull" +
        "=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
        public partial class Address : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _AddressEntityConfiguration;
            
            protected int _ID;
            
            protected int _UserID;
            
            protected string _Name;
            
            protected string _Content;
            
            public static @__Columns _ = new @__Columns();
            
    		public static bool operator ==(global::Entities.Address left, global::Entities.Address right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.Address left, global::Entities.Address right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int ID {
                get {
                    return this._ID;
                }
                set {
                    this.OnPropertyChanged("ID", this._ID, value);
                    this._ID = value;
                }
            }
            
            public int UserID {
                get {
                    return this._UserID;
                }
                set {
                    this.OnPropertyChanged("UserID", this._UserID, value);
                    this._UserID = value;
                }
            }
            
            public string Name {
                get {
                    return this._Name;
                }
                set {
                    this.OnPropertyChanged("Name", this._Name, value);
                    this._Name = value;
                }
            }
            
            public string Content {
                get {
                    return this._Content;
                }
                set {
                    this.OnPropertyChanged("Content", this._Content, value);
                    this._Content = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((Address._AddressEntityConfiguration == null)) {
                    Address._AddressEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.Address");
                }
                return Address._AddressEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._UserID,
                        this._Name,
                        this._Content};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._UserID = reader.GetInt32(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._Name = reader.GetString(2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._Content = reader.GetString(3);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._UserID = ((int)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._Name = ((string)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._Content = ((string)(row[3]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.Address).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.Address)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.Address)(obj)).ID));
            }
            
            public static @__Columns @__Alias(string aliasName) {
                return new @__Columns(aliasName);
            }
            
            public class @__Columns {
                
                protected string aliasName;
                
                protected NBear.Common.PropertyItem _ID = new NBear.Common.PropertyItem("ID", "Entities.Address");
                
                protected NBear.Common.PropertyItem _UserID = new NBear.Common.PropertyItem("UserID", "Entities.Address");
                
                protected NBear.Common.PropertyItem _Name = new NBear.Common.PropertyItem("Name", "Entities.Address");
                
                protected NBear.Common.PropertyItem _Content = new NBear.Common.PropertyItem("Content", "Entities.Address");
                
                public @__Columns() {
                }
                
                public @__Columns(string aliasName) {
                    this.aliasName = aliasName;
                }
                
                public NBear.Common.PropertyItem ID {
                    get {
                        if ((aliasName == null)) {
                            return _ID;
                        }
                        else {
                            return new NBear.Common.PropertyItem("ID", _ID.EntityConfiguration, _ID.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem UserID {
                    get {
                        if ((aliasName == null)) {
                            return _UserID;
                        }
                        else {
                            return new NBear.Common.PropertyItem("UserID", _UserID.EntityConfiguration, _UserID.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem Name {
                    get {
                        if ((aliasName == null)) {
                            return _Name;
                        }
                        else {
                            return new NBear.Common.PropertyItem("Name", _Name.EntityConfiguration, _Name.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem Content {
                    get {
                        if ((aliasName == null)) {
                            return _Content;
                        }
                        else {
                            return new NBear.Common.PropertyItem("Content", _Content.EntityConfiguration, _Content.PropertyConfiguration, aliasName);
                        }
                    }
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class TempTableArrayList : NBear.Common.EntityArrayList<Entities.TempTable> {
        }
        
        [System.SerializableAttribute()]
        [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Entities.TempTable\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBatchUpdate" +
        "=\"false\" isRelation=\"false\" mappingName=\"TempTable\" batchSize=\"10\">\r\n  <Properti" +
        "es>\r\n    <Property name=\"ID\" type=\"System.Decimal\" isInherited=\"false\" isReadOnl" +
        "y=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=" +
        "\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndex" +
        "PropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ID\" mappingColum" +
        "nType=\"System.Decimal\" sqlType=\"decimal\" isPrimaryKey=\"true\" isNotNull=\"true\" />" +
        "\r\n    <Property name=\"ColName\" type=\"System.String\" isInherited=\"false\" isReadOn" +
        "ly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKe" +
        "y=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isInd" +
        "exPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ColName\" mappi" +
        "ngColumnType=\"System.String\" sqlType=\"nvarchar(127)\" isPrimaryKey=\"false\" isNotN" +
        "ull=\"false\" />\r\n    <Property name=\"Guid\" type=\"System.Guid\" isInherited=\"false\"" +
        " isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" i" +
        "sFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fal" +
        "se\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Guid\"" +
        " mappingColumnType=\"System.Guid\" sqlType=\"uniqueidentifier\" isPrimaryKey=\"false\"" +
        " isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
        public partial class TempTable : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _TempTableEntityConfiguration;
            
            protected decimal _ID;
            
            protected string _ColName;
            
            protected global::System.Guid _Guid;
            
            public static @__Columns _ = new @__Columns();
            
    		public static bool operator ==(global::Entities.TempTable left, global::Entities.TempTable right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.TempTable left, global::Entities.TempTable right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public decimal ID {
                get {
                    return this._ID;
                }
                set {
                    this.OnPropertyChanged("ID", this._ID, value);
                    this._ID = value;
                }
            }
            
            public string ColName {
                get {
                    return this._ColName;
                }
                set {
                    this.OnPropertyChanged("ColName", this._ColName, value);
                    this._ColName = value;
                }
            }
            
            public global::System.Guid Guid {
                get {
                    return this._Guid;
                }
                set {
                    this.OnPropertyChanged("Guid", this._Guid, value);
                    this._Guid = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((TempTable._TempTableEntityConfiguration == null)) {
                    TempTable._TempTableEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.TempTable");
                }
                return TempTable._TempTableEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._ColName,
                        this._Guid};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetDecimal(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._ColName = reader.GetString(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._Guid = this.GetGuid(reader, 2);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((decimal)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._ColName = ((string)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._Guid = this.GetGuid(row, 2);
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.TempTable).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.TempTable)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.TempTable)(obj)).ID));
            }
            
            public static @__Columns @__Alias(string aliasName) {
                return new @__Columns(aliasName);
            }
            
            public class @__Columns {
                
                protected string aliasName;
                
                protected NBear.Common.PropertyItem _ID = new NBear.Common.PropertyItem("ID", "Entities.TempTable");
                
                protected NBear.Common.PropertyItem _ColName = new NBear.Common.PropertyItem("ColName", "Entities.TempTable");
                
                protected NBear.Common.PropertyItem _Guid = new NBear.Common.PropertyItem("Guid", "Entities.TempTable");
                
                public @__Columns() {
                }
                
                public @__Columns(string aliasName) {
                    this.aliasName = aliasName;
                }
                
                public NBear.Common.PropertyItem ID {
                    get {
                        if ((aliasName == null)) {
                            return _ID;
                        }
                        else {
                            return new NBear.Common.PropertyItem("ID", _ID.EntityConfiguration, _ID.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem ColName {
                    get {
                        if ((aliasName == null)) {
                            return _ColName;
                        }
                        else {
                            return new NBear.Common.PropertyItem("ColName", _ColName.EntityConfiguration, _ColName.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem Guid {
                    get {
                        if ((aliasName == null)) {
                            return _Guid;
                        }
                        else {
                            return new NBear.Common.PropertyItem("Guid", _Guid.EntityConfiguration, _Guid.PropertyConfiguration, aliasName);
                        }
                    }
                }
            }
        }
    }
    namespace Entities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class MessageArrayList : NBear.Common.EntityArrayList<Entities.Message> {
        }
        
        [System.SerializableAttribute()]
        [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Entities.Message\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBatchUpdate=\"" +
        "false\" isRelation=\"false\" mappingName=\"Message\" batchSize=\"10\">\r\n  <Properties>\r" +
        "\n    <Property name=\"ID\" type=\"System.Int32\" isInherited=\"false\" isReadOnly=\"tru" +
        "e\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false" +
        "\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProper" +
        "tyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ID\" mappingColumnType=" +
        "\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true\" isNotNull=\"true\" />\r\n    <Prope" +
        "rty name=\"AdminFeedback\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"fa" +
        "lse\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"fal" +
        "se\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProp" +
        "ertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"AdminFeedback\" mappi" +
        "ngColumnType=\"System.String\" sqlType=\"ntext\" isPrimaryKey=\"false\" isNotNull=\"fal" +
        "se\" />\r\n    <Property name=\"AdminFeedbackTime\" type=\"System.Nullable`1[System.Da" +
        "teTime]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContain" +
        "ed=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=" +
        "\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnor" +
        "e=\"false\" mappingName=\"AdminFeedbackTime\" mappingColumnType=\"System.Nullable`1[S" +
        "ystem.DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n " +
        "   <Property name=\"Content\" type=\"System.String\" isInherited=\"false\" isReadOnly=" +
        "\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"" +
        "false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexP" +
        "ropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Content\" mappingC" +
        "olumnType=\"System.String\" sqlType=\"ntext\" isPrimaryKey=\"false\" isNotNull=\"false\"" +
        " />\r\n    <Property name=\"Email\" type=\"System.String\" isInherited=\"false\" isReadO" +
        "nly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendK" +
        "ey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIn" +
        "dexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Email\" mappin" +
        "gColumnType=\"System.String\" sqlType=\"nvarchar(127)\" isPrimaryKey=\"false\" isNotNu" +
        "ll=\"false\" />\r\n    <Property name=\"IsPrivate\" type=\"System.Boolean\" isInherited=" +
        "\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"f" +
        "alse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProper" +
        "ty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName" +
        "=\"IsPrivate\" mappingColumnType=\"System.Boolean\" sqlType=\"bit\" isPrimaryKey=\"fals" +
        "e\" isNotNull=\"false\" />\r\n    <Property name=\"Nick\" type=\"System.String\" isInheri" +
        "ted=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuer" +
        "y=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPr" +
        "operty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mapping" +
        "Name=\"Nick\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(127)\" isPrimaryK" +
        "ey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"PostTime\" type=\"System.Date" +
        "Time\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=" +
        "\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"fa" +
        "lse\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"" +
        "false\" mappingName=\"PostTime\" mappingColumnType=\"System.DateTime\" sqlType=\"datet" +
        "ime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfigu" +
        "ration>")]
        public partial class Message : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _MessageEntityConfiguration;
            
            protected int _ID;
            
            protected string _AdminFeedback;
            
            protected global::System.DateTime? _AdminFeedbackTime;
            
            protected string _Content;
            
            protected string _Email;
            
            protected bool _IsPrivate;
            
            protected string _Nick;
            
            protected global::System.DateTime _PostTime;
            
            public static @__Columns _ = new @__Columns();
            
    		public static bool operator ==(global::Entities.Message left, global::Entities.Message right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::Entities.Message left, global::Entities.Message right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public int ID {
                get {
                    return this._ID;
                }
                set {
                    this.OnPropertyChanged("ID", this._ID, value);
                    this._ID = value;
                }
            }
            
            public string AdminFeedback {
                get {
                    return this._AdminFeedback;
                }
                set {
                    this.OnPropertyChanged("AdminFeedback", this._AdminFeedback, value);
                    this._AdminFeedback = value;
                }
            }
            
            public global::System.DateTime? AdminFeedbackTime {
                get {
                    return this._AdminFeedbackTime;
                }
                set {
                    this.OnPropertyChanged("AdminFeedbackTime", this._AdminFeedbackTime, value);
                    this._AdminFeedbackTime = value;
                }
            }
            
            public string Content {
                get {
                    return this._Content;
                }
                set {
                    this.OnPropertyChanged("Content", this._Content, value);
                    this._Content = value;
                }
            }
            
            public string Email {
                get {
                    return this._Email;
                }
                set {
                    this.OnPropertyChanged("Email", this._Email, value);
                    this._Email = value;
                }
            }
            
            public bool IsPrivate {
                get {
                    return this._IsPrivate;
                }
                set {
                    this.OnPropertyChanged("IsPrivate", this._IsPrivate, value);
                    this._IsPrivate = value;
                }
            }
            
            public string Nick {
                get {
                    return this._Nick;
                }
                set {
                    this.OnPropertyChanged("Nick", this._Nick, value);
                    this._Nick = value;
                }
            }
            
            public global::System.DateTime PostTime {
                get {
                    return this._PostTime;
                }
                set {
                    this.OnPropertyChanged("PostTime", this._PostTime, value);
                    this._PostTime = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((Message._MessageEntityConfiguration == null)) {
                    Message._MessageEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Entities.Message");
                }
                return Message._MessageEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ID,
                        this._AdminFeedback,
                        this._AdminFeedbackTime,
                        this._Content,
                        this._Email,
                        this._IsPrivate,
                        this._Nick,
                        this._PostTime};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ID = reader.GetInt32(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._AdminFeedback = reader.GetString(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._AdminFeedbackTime = this.GetDateTime(reader, 2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._Content = reader.GetString(3);
                }
                if ((false == reader.IsDBNull(4))) {
                    this._Email = reader.GetString(4);
                }
                if ((false == reader.IsDBNull(5))) {
                    this._IsPrivate = reader.GetBoolean(5);
                }
                if ((false == reader.IsDBNull(6))) {
                    this._Nick = reader.GetString(6);
                }
                if ((false == reader.IsDBNull(7))) {
                    this._PostTime = this.GetDateTime(reader, 7);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ID = ((int)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._AdminFeedback = ((string)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._AdminFeedbackTime = this.GetDateTime(row, 2);
                }
                if ((false == row.IsNull(3))) {
                    this._Content = ((string)(row[3]));
                }
                if ((false == row.IsNull(4))) {
                    this._Email = ((string)(row[4]));
                }
                if ((false == row.IsNull(5))) {
                    this._IsPrivate = ((bool)(row[5]));
                }
                if ((false == row.IsNull(6))) {
                    this._Nick = ((string)(row[6]));
                }
                if ((false == row.IsNull(7))) {
                    this._PostTime = this.GetDateTime(row, 7);
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::Entities.Message).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::Entities.Message)(obj)).isAttached) 
                            && (this.ID == ((global::Entities.Message)(obj)).ID));
            }
            
            public static @__Columns @__Alias(string aliasName) {
                return new @__Columns(aliasName);
            }
            
            public class @__Columns {
                
                protected string aliasName;
                
                protected NBear.Common.PropertyItem _ID = new NBear.Common.PropertyItem("ID", "Entities.Message");
                
                protected NBear.Common.PropertyItem _AdminFeedback = new NBear.Common.PropertyItem("AdminFeedback", "Entities.Message");
                
                protected NBear.Common.PropertyItem _AdminFeedbackTime = new NBear.Common.PropertyItem("AdminFeedbackTime", "Entities.Message");
                
                protected NBear.Common.PropertyItem _Content = new NBear.Common.PropertyItem("Content", "Entities.Message");
                
                protected NBear.Common.PropertyItem _Email = new NBear.Common.PropertyItem("Email", "Entities.Message");
                
                protected NBear.Common.PropertyItem _IsPrivate = new NBear.Common.PropertyItem("IsPrivate", "Entities.Message");
                
                protected NBear.Common.PropertyItem _Nick = new NBear.Common.PropertyItem("Nick", "Entities.Message");
                
                protected NBear.Common.PropertyItem _PostTime = new NBear.Common.PropertyItem("PostTime", "Entities.Message");
                
                public @__Columns() {
                }
                
                public @__Columns(string aliasName) {
                    this.aliasName = aliasName;
                }
                
                public NBear.Common.PropertyItem ID {
                    get {
                        if ((aliasName == null)) {
                            return _ID;
                        }
                        else {
                            return new NBear.Common.PropertyItem("ID", _ID.EntityConfiguration, _ID.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem AdminFeedback {
                    get {
                        if ((aliasName == null)) {
                            return _AdminFeedback;
                        }
                        else {
                            return new NBear.Common.PropertyItem("AdminFeedback", _AdminFeedback.EntityConfiguration, _AdminFeedback.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem AdminFeedbackTime {
                    get {
                        if ((aliasName == null)) {
                            return _AdminFeedbackTime;
                        }
                        else {
                            return new NBear.Common.PropertyItem("AdminFeedbackTime", _AdminFeedbackTime.EntityConfiguration, _AdminFeedbackTime.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem Content {
                    get {
                        if ((aliasName == null)) {
                            return _Content;
                        }
                        else {
                            return new NBear.Common.PropertyItem("Content", _Content.EntityConfiguration, _Content.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem Email {
                    get {
                        if ((aliasName == null)) {
                            return _Email;
                        }
                        else {
                            return new NBear.Common.PropertyItem("Email", _Email.EntityConfiguration, _Email.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem IsPrivate {
                    get {
                        if ((aliasName == null)) {
                            return _IsPrivate;
                        }
                        else {
                            return new NBear.Common.PropertyItem("IsPrivate", _IsPrivate.EntityConfiguration, _IsPrivate.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem Nick {
                    get {
                        if ((aliasName == null)) {
                            return _Nick;
                        }
                        else {
                            return new NBear.Common.PropertyItem("Nick", _Nick.EntityConfiguration, _Nick.PropertyConfiguration, aliasName);
                        }
                    }
                }
                
                public NBear.Common.PropertyItem PostTime {
                    get {
                        if ((aliasName == null)) {
                            return _PostTime;
                        }
                        else {
                            return new NBear.Common.PropertyItem("PostTime", _PostTime.EntityConfiguration, _PostTime.PropertyConfiguration, aliasName);
                        }
                    }
                }
            }
        }
    }
