//------------------------------------------------------------------------------
    // <auto-generated>
    //     This code was generated by a tool.
    //     Runtime Version:2.0.50727.42
    //
    //     Changes to this file may cause incorrect behavior and will be lost if
    //     the code is regenerated.
    // </auto-generated>
    //------------------------------------------------------------------------------
    
    namespace NBear.Web.Data.AspNetDbEntities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class ApplicationArrayList : NBear.Common.EntityArrayList<NBear.Web.Data.AspNetDbEntities.Application> {
        }
        
        [System.SerializableAttribute()]
        [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"NBear.Web.Data.AspNetDbEntities.Application\" isReadOnly=\"true\" isAutoPreLo" +
        "ad=\"false\" isBatchUpdate=\"false\" isRelation=\"false\" mappingName=\"aspnet_Applicat" +
        "ions\" batchSize=\"10\">\r\n  <Properties>\r\n    <Property name=\"ApplicationName\" type" +
        "=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" i" +
        "sContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRela" +
        "tionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializat" +
        "ionIgnore=\"false\" mappingName=\"ApplicationName\" mappingColumnType=\"System.String" +
        "\" sqlType=\"nvarchar(256)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Proper" +
        "ty name=\"LoweredApplicationName\" type=\"System.String\" isInherited=\"false\" isRead" +
        "Only=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriend" +
        "Key=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isI" +
        "ndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"LoweredAppli" +
        "cationName\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(256)\" isPrimaryK" +
        "ey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ApplicationId\" type=\"System" +
        ".Guid\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained" +
        "=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"f" +
        "alse\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=" +
        "\"false\" mappingName=\"ApplicationId\" mappingColumnType=\"System.Guid\" sqlType=\"uni" +
        "queidentifier\" isPrimaryKey=\"true\" isNotNull=\"true\" />\r\n    <Property name=\"Desc" +
        "ription\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundU" +
        "nit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"" +
        "false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\"" +
        " isSerializationIgnore=\"false\" mappingName=\"Description\" mappingColumnType=\"Syst" +
        "em.String\" sqlType=\"nvarchar(256)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  " +
        "</Properties>\r\n</EntityConfiguration>")]
        public partial class Application : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _ApplicationEntityConfiguration;
            
            protected string _ApplicationName;
            
            protected string _LoweredApplicationName;
            
            protected global::System.Guid _ApplicationId;
            
            protected string _Description;
            
    		public static bool operator ==(global::NBear.Web.Data.AspNetDbEntities.Application left, global::NBear.Web.Data.AspNetDbEntities.Application right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::NBear.Web.Data.AspNetDbEntities.Application left, global::NBear.Web.Data.AspNetDbEntities.Application right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public string ApplicationName {
                get {
                    return this._ApplicationName;
                }
                set {
                    this.OnPropertyChanged("ApplicationName", this._ApplicationName, value);
                    this._ApplicationName = value;
                }
            }
            
            public string LoweredApplicationName {
                get {
                    return this._LoweredApplicationName;
                }
                set {
                    this.OnPropertyChanged("LoweredApplicationName", this._LoweredApplicationName, value);
                    this._LoweredApplicationName = value;
                }
            }
            
            public global::System.Guid ApplicationId {
                get {
                    return this._ApplicationId;
                }
                set {
                    this.OnPropertyChanged("ApplicationId", this._ApplicationId, value);
                    this._ApplicationId = value;
                }
            }
            
            public string Description {
                get {
                    return this._Description;
                }
                set {
                    this.OnPropertyChanged("Description", this._Description, value);
                    this._Description = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((Application._ApplicationEntityConfiguration == null)) {
                    Application._ApplicationEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("NBear.Web.Data.AspNetDbEntities.Application");
                }
                return Application._ApplicationEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._ApplicationName,
                        this._LoweredApplicationName,
                        this._ApplicationId,
                        this._Description};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._ApplicationName = reader.GetString(0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._LoweredApplicationName = reader.GetString(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._ApplicationId = this.GetGuid(reader, 2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._Description = reader.GetString(3);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._ApplicationName = ((string)(row[0]));
                }
                if ((false == row.IsNull(1))) {
                    this._LoweredApplicationName = ((string)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._ApplicationId = ((System.Guid)(this.GetGuid(row, 2)));
                }
                if ((false == row.IsNull(3))) {
                    this._Description = ((string)(row[3]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::NBear.Web.Data.AspNetDbEntities.Application).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::NBear.Web.Data.AspNetDbEntities.Application)(obj)).isAttached) 
                            && (this.ApplicationId == ((global::NBear.Web.Data.AspNetDbEntities.Application)(obj)).ApplicationId));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem ApplicationName = new NBear.Common.PropertyItem("ApplicationName", "NBear.Web.Data.AspNetDbEntities.Application");
                
                public static NBear.Common.PropertyItem LoweredApplicationName = new NBear.Common.PropertyItem("LoweredApplicationName", "NBear.Web.Data.AspNetDbEntities.Application");
                
                public static NBear.Common.PropertyItem ApplicationId = new NBear.Common.PropertyItem("ApplicationId", "NBear.Web.Data.AspNetDbEntities.Application");
                
                public static NBear.Common.PropertyItem Description = new NBear.Common.PropertyItem("Description", "NBear.Web.Data.AspNetDbEntities.Application");
                
                private _() {
                }
            }
        }
    }
    namespace NBear.Web.Data.AspNetDbEntities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class MembershipArrayList : NBear.Common.EntityArrayList<NBear.Web.Data.AspNetDbEntities.Membership> {
        }
        
        [System.SerializableAttribute()]
        [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"NBear.Web.Data.AspNetDbEntities.Membership\" isReadOnly=\"true\" isAutoPreLoa" +
        "d=\"false\" isBatchUpdate=\"false\" isRelation=\"false\" mappingName=\"aspnet_Membershi" +
        "p\" batchSize=\"10\">\r\n  <Properties>\r\n    <Property name=\"Application\" type=\"NBear" +
        ".Web.Data.AspNetDbEntities.Application\" isInherited=\"false\" isReadOnly=\"false\" i" +
        "sCompoundUnit=\"false\" isContained=\"false\" isQuery=\"true\" isFriendKey=\"false\" isL" +
        "azyLoad=\"true\" queryWhere=\"{ApplicationId} = @Application\" queryType=\"FkReverseQ" +
        "uery\" isRelationKey=\"false\" relatedType=\"NBear.Web.Data.AspNetDbEntities.Applica" +
        "tion\" relatedForeignKey=\"ApplicationId\" isIndexProperty=\"false\" isIndexPropertyD" +
        "esc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ApplicationId\" mappingCol" +
        "umnType=\"System.Nullable`1[System.Guid]\" sqlType=\"uniqueidentifier\" isPrimaryKey" +
        "=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"UserId\" type=\"System.Guid\" is" +
        "Inherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" " +
        "isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isI" +
        "ndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" m" +
        "appingName=\"UserId\" mappingColumnType=\"System.Guid\" sqlType=\"uniqueidentifier\" i" +
        "sPrimaryKey=\"true\" isNotNull=\"true\" />\r\n    <Property name=\"Password\" type=\"Syst" +
        "em.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isConta" +
        "ined=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKe" +
        "y=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgn" +
        "ore=\"false\" mappingName=\"Password\" mappingColumnType=\"System.String\" sqlType=\"nv" +
        "archar(128)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Pass" +
        "wordFormat\" type=\"System.Int32\" isInherited=\"false\" isReadOnly=\"false\" isCompoun" +
        "dUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad" +
        "=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"fals" +
        "e\" isSerializationIgnore=\"false\" mappingName=\"PasswordFormat\" mappingColumnType=" +
        "\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Pro" +
        "perty name=\"PasswordSalt\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"f" +
        "alse\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"fa" +
        "lse\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPro" +
        "pertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"PasswordSalt\" mappi" +
        "ngColumnType=\"System.String\" sqlType=\"nvarchar(128)\" isPrimaryKey=\"false\" isNotN" +
        "ull=\"false\" />\r\n    <Property name=\"MobilePIN\" type=\"System.String\" isInherited=" +
        "\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"f" +
        "alse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProper" +
        "ty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName" +
        "=\"MobilePIN\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(16)\" isPrimaryK" +
        "ey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Email\" type=\"System.String\"" +
        " isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"fals" +
        "e\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" " +
        "isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false" +
        "\" mappingName=\"Email\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(256)\" " +
        "isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"LoweredEmail\" typ" +
        "e=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" " +
        "isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRel" +
        "ationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializa" +
        "tionIgnore=\"false\" mappingName=\"LoweredEmail\" mappingColumnType=\"System.String\" " +
        "sqlType=\"nvarchar(256)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property" +
        " name=\"PasswordQuestion\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"fa" +
        "lse\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"fal" +
        "se\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProp" +
        "ertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"PasswordQuestion\" ma" +
        "ppingColumnType=\"System.String\" sqlType=\"nvarchar(256)\" isPrimaryKey=\"false\" isN" +
        "otNull=\"false\" />\r\n    <Property name=\"PasswordAnswer\" type=\"System.String\" isIn" +
        "herited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" is" +
        "Query=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInd" +
        "exProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" map" +
        "pingName=\"PasswordAnswer\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(12" +
        "8)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"IsApproved\" t" +
        "ype=\"System.Boolean\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"fals" +
        "e\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" is" +
        "RelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerial" +
        "izationIgnore=\"false\" mappingName=\"IsApproved\" mappingColumnType=\"System.Boolean" +
        "\" sqlType=\"bit\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"I" +
        "sLockedOut\" type=\"System.Boolean\" isInherited=\"false\" isReadOnly=\"false\" isCompo" +
        "undUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLo" +
        "ad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"fa" +
        "lse\" isSerializationIgnore=\"false\" mappingName=\"IsLockedOut\" mappingColumnType=\"" +
        "System.Boolean\" sqlType=\"bit\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Pr" +
        "operty name=\"CreateDate\" type=\"System.DateTime\" isInherited=\"false\" isReadOnly=\"" +
        "false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"f" +
        "alse\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPr" +
        "opertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"CreateDate\" mappin" +
        "gColumnType=\"System.DateTime\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=" +
        "\"false\" />\r\n    <Property name=\"LastLoginDate\" type=\"System.DateTime\" isInherite" +
        "d=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=" +
        "\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProp" +
        "erty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNa" +
        "me=\"LastLoginDate\" mappingColumnType=\"System.DateTime\" sqlType=\"datetime\" isPrim" +
        "aryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"LastPasswordChangedDate" +
        "\" type=\"System.DateTime\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"" +
        "false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false" +
        "\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSe" +
        "rializationIgnore=\"false\" mappingName=\"LastPasswordChangedDate\" mappingColumnTyp" +
        "e=\"System.DateTime\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />" +
        "\r\n    <Property name=\"LastLockoutDate\" type=\"System.DateTime\" isInherited=\"false" +
        "\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" " +
        "isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fa" +
        "lse\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Last" +
        "LockoutDate\" mappingColumnType=\"System.DateTime\" sqlType=\"datetime\" isPrimaryKey" +
        "=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"FailedPasswordAttemptCount\" t" +
        "ype=\"System.Int32\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\"" +
        " isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRe" +
        "lationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializ" +
        "ationIgnore=\"false\" mappingName=\"FailedPasswordAttemptCount\" mappingColumnType=\"" +
        "System.Int32\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Prop" +
        "erty name=\"FailedPasswordAttemptWindowStart\" type=\"System.DateTime\" isInherited=" +
        "\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"f" +
        "alse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProper" +
        "ty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName" +
        "=\"FailedPasswordAttemptWindowStart\" mappingColumnType=\"System.DateTime\" sqlType=" +
        "\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Failed" +
        "PasswordAnswerAttemptCount\" type=\"System.Int32\" isInherited=\"false\" isReadOnly=\"" +
        "false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"f" +
        "alse\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPr" +
        "opertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"FailedPasswordAnsw" +
        "erAttemptCount\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"fal" +
        "se\" isNotNull=\"false\" />\r\n    <Property name=\"FailedPasswordAnswerAttemptWindowS" +
        "tart\" type=\"System.DateTime\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUn" +
        "it=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"f" +
        "alse\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" " +
        "isSerializationIgnore=\"false\" mappingName=\"FailedPasswordAnswerAttemptWindowStar" +
        "t\" mappingColumnType=\"System.DateTime\" sqlType=\"datetime\" isPrimaryKey=\"false\" i" +
        "sNotNull=\"false\" />\r\n    <Property name=\"Comment\" type=\"System.String\" isInherit" +
        "ed=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery" +
        "=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPro" +
        "perty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingN" +
        "ame=\"Comment\" mappingColumnType=\"System.String\" sqlType=\"ntext\" isPrimaryKey=\"fa" +
        "lse\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
        public partial class Membership : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _MembershipEntityConfiguration;
            
            protected global::NBear.Web.Data.AspNetDbEntities.Application _Application;
            
            protected global::System.Guid? _Application_ApplicationId;
            
            protected global::System.Guid _UserId;
            
            protected string _Password;
            
            protected int _PasswordFormat;
            
            protected string _PasswordSalt;
            
            protected string _MobilePIN;
            
            protected string _Email;
            
            protected string _LoweredEmail;
            
            protected string _PasswordQuestion;
            
            protected string _PasswordAnswer;
            
            protected bool _IsApproved;
            
            protected bool _IsLockedOut;
            
            protected global::System.DateTime _CreateDate;
            
            protected global::System.DateTime _LastLoginDate;
            
            protected global::System.DateTime _LastPasswordChangedDate;
            
            protected global::System.DateTime _LastLockoutDate;
            
            protected int _FailedPasswordAttemptCount;
            
            protected global::System.DateTime _FailedPasswordAttemptWindowStart;
            
            protected int _FailedPasswordAnswerAttemptCount;
            
            protected global::System.DateTime _FailedPasswordAnswerAttemptWindowStart;
            
            protected string _Comment;
            
    		public static bool operator ==(global::NBear.Web.Data.AspNetDbEntities.Membership left, global::NBear.Web.Data.AspNetDbEntities.Membership right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::NBear.Web.Data.AspNetDbEntities.Membership left, global::NBear.Web.Data.AspNetDbEntities.Membership right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public global::NBear.Web.Data.AspNetDbEntities.Application Application {
                get {
                    if (this.IsQueryPropertyLoaded("Application")) {
                    }
                    else {
                        global::NBear.Web.Data.AspNetDbEntities.Application _obj;
                        _obj = ((global::NBear.Web.Data.AspNetDbEntities.Application)(this.QueryOne(typeof(global::NBear.Web.Data.AspNetDbEntities.Application), "Application", this)));
                        this.OnQueryOnePropertyChanged("Application", this._Application, _obj);
                        this._Application = _obj;
                    }
                    return this._Application;
                }
                set {
                    this.OnQueryOnePropertyChanged("Application", this.Application, value);
                    this._Application = value;
                    if ((value == null)) {
                        this.OnPropertyChanged("Application", this._Application_ApplicationId, null);
                        this._Application_ApplicationId = null;
                    }
                    else {
                        this.OnPropertyChanged("Application", this._Application_ApplicationId, value.ApplicationId);
                        this._Application_ApplicationId = value.ApplicationId;
                    }
                }
            }
            
            public global::System.Guid UserId {
                get {
                    return this._UserId;
                }
                set {
                    this.OnPropertyChanged("UserId", this._UserId, value);
                    this._UserId = value;
                }
            }
            
            public string Password {
                get {
                    return this._Password;
                }
                set {
                    this.OnPropertyChanged("Password", this._Password, value);
                    this._Password = value;
                }
            }
            
            public int PasswordFormat {
                get {
                    return this._PasswordFormat;
                }
                set {
                    this.OnPropertyChanged("PasswordFormat", this._PasswordFormat, value);
                    this._PasswordFormat = value;
                }
            }
            
            public string PasswordSalt {
                get {
                    return this._PasswordSalt;
                }
                set {
                    this.OnPropertyChanged("PasswordSalt", this._PasswordSalt, value);
                    this._PasswordSalt = value;
                }
            }
            
            public string MobilePIN {
                get {
                    return this._MobilePIN;
                }
                set {
                    this.OnPropertyChanged("MobilePIN", this._MobilePIN, value);
                    this._MobilePIN = value;
                }
            }
            
            public string Email {
                get {
                    return this._Email;
                }
                set {
                    this.OnPropertyChanged("Email", this._Email, value);
                    this._Email = value;
                }
            }
            
            public string LoweredEmail {
                get {
                    return this._LoweredEmail;
                }
                set {
                    this.OnPropertyChanged("LoweredEmail", this._LoweredEmail, value);
                    this._LoweredEmail = value;
                }
            }
            
            public string PasswordQuestion {
                get {
                    return this._PasswordQuestion;
                }
                set {
                    this.OnPropertyChanged("PasswordQuestion", this._PasswordQuestion, value);
                    this._PasswordQuestion = value;
                }
            }
            
            public string PasswordAnswer {
                get {
                    return this._PasswordAnswer;
                }
                set {
                    this.OnPropertyChanged("PasswordAnswer", this._PasswordAnswer, value);
                    this._PasswordAnswer = value;
                }
            }
            
            public bool IsApproved {
                get {
                    return this._IsApproved;
                }
                set {
                    this.OnPropertyChanged("IsApproved", this._IsApproved, value);
                    this._IsApproved = value;
                }
            }
            
            public bool IsLockedOut {
                get {
                    return this._IsLockedOut;
                }
                set {
                    this.OnPropertyChanged("IsLockedOut", this._IsLockedOut, value);
                    this._IsLockedOut = value;
                }
            }
            
            public global::System.DateTime CreateDate {
                get {
                    return this._CreateDate;
                }
                set {
                    this.OnPropertyChanged("CreateDate", this._CreateDate, value);
                    this._CreateDate = value;
                }
            }
            
            public global::System.DateTime LastLoginDate {
                get {
                    return this._LastLoginDate;
                }
                set {
                    this.OnPropertyChanged("LastLoginDate", this._LastLoginDate, value);
                    this._LastLoginDate = value;
                }
            }
            
            public global::System.DateTime LastPasswordChangedDate {
                get {
                    return this._LastPasswordChangedDate;
                }
                set {
                    this.OnPropertyChanged("LastPasswordChangedDate", this._LastPasswordChangedDate, value);
                    this._LastPasswordChangedDate = value;
                }
            }
            
            public global::System.DateTime LastLockoutDate {
                get {
                    return this._LastLockoutDate;
                }
                set {
                    this.OnPropertyChanged("LastLockoutDate", this._LastLockoutDate, value);
                    this._LastLockoutDate = value;
                }
            }
            
            public int FailedPasswordAttemptCount {
                get {
                    return this._FailedPasswordAttemptCount;
                }
                set {
                    this.OnPropertyChanged("FailedPasswordAttemptCount", this._FailedPasswordAttemptCount, value);
                    this._FailedPasswordAttemptCount = value;
                }
            }
            
            public global::System.DateTime FailedPasswordAttemptWindowStart {
                get {
                    return this._FailedPasswordAttemptWindowStart;
                }
                set {
                    this.OnPropertyChanged("FailedPasswordAttemptWindowStart", this._FailedPasswordAttemptWindowStart, value);
                    this._FailedPasswordAttemptWindowStart = value;
                }
            }
            
            public int FailedPasswordAnswerAttemptCount {
                get {
                    return this._FailedPasswordAnswerAttemptCount;
                }
                set {
                    this.OnPropertyChanged("FailedPasswordAnswerAttemptCount", this._FailedPasswordAnswerAttemptCount, value);
                    this._FailedPasswordAnswerAttemptCount = value;
                }
            }
            
            public global::System.DateTime FailedPasswordAnswerAttemptWindowStart {
                get {
                    return this._FailedPasswordAnswerAttemptWindowStart;
                }
                set {
                    this.OnPropertyChanged("FailedPasswordAnswerAttemptWindowStart", this._FailedPasswordAnswerAttemptWindowStart, value);
                    this._FailedPasswordAnswerAttemptWindowStart = value;
                }
            }
            
            public string Comment {
                get {
                    return this._Comment;
                }
                set {
                    this.OnPropertyChanged("Comment", this._Comment, value);
                    this._Comment = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((Membership._MembershipEntityConfiguration == null)) {
                    Membership._MembershipEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("NBear.Web.Data.AspNetDbEntities.Membership");
                }
                return Membership._MembershipEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("NBear.Web.Data.AspNetDbEntities.Membership", "Application")))) {
                    global::NBear.Web.Data.AspNetDbEntities.Application _obj;
                    _obj = ((global::NBear.Web.Data.AspNetDbEntities.Application)(this.QueryOne(typeof(global::NBear.Web.Data.AspNetDbEntities.Application), "Application", this)));
                    this.OnQueryOnePropertyChanged("Application", this._Application, _obj);
                    this._Application = _obj;
                }
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._Application_ApplicationId,
                        this._UserId,
                        this._Password,
                        this._PasswordFormat,
                        this._PasswordSalt,
                        this._MobilePIN,
                        this._Email,
                        this._LoweredEmail,
                        this._PasswordQuestion,
                        this._PasswordAnswer,
                        this._IsApproved,
                        this._IsLockedOut,
                        this._CreateDate,
                        this._LastLoginDate,
                        this._LastPasswordChangedDate,
                        this._LastLockoutDate,
                        this._FailedPasswordAttemptCount,
                        this._FailedPasswordAttemptWindowStart,
                        this._FailedPasswordAnswerAttemptCount,
                        this._FailedPasswordAnswerAttemptWindowStart,
                        this._Comment};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._Application_ApplicationId = this.GetGuid(reader, 0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._UserId = this.GetGuid(reader, 1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._Password = reader.GetString(2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._PasswordFormat = reader.GetInt32(3);
                }
                if ((false == reader.IsDBNull(4))) {
                    this._PasswordSalt = reader.GetString(4);
                }
                if ((false == reader.IsDBNull(5))) {
                    this._MobilePIN = reader.GetString(5);
                }
                if ((false == reader.IsDBNull(6))) {
                    this._Email = reader.GetString(6);
                }
                if ((false == reader.IsDBNull(7))) {
                    this._LoweredEmail = reader.GetString(7);
                }
                if ((false == reader.IsDBNull(8))) {
                    this._PasswordQuestion = reader.GetString(8);
                }
                if ((false == reader.IsDBNull(9))) {
                    this._PasswordAnswer = reader.GetString(9);
                }
                if ((false == reader.IsDBNull(10))) {
                    this._IsApproved = reader.GetBoolean(10);
                }
                if ((false == reader.IsDBNull(11))) {
                    this._IsLockedOut = reader.GetBoolean(11);
                }
                if ((false == reader.IsDBNull(12))) {
                    this._CreateDate = reader.GetDateTime(12);
                }
                if ((false == reader.IsDBNull(13))) {
                    this._LastLoginDate = reader.GetDateTime(13);
                }
                if ((false == reader.IsDBNull(14))) {
                    this._LastPasswordChangedDate = reader.GetDateTime(14);
                }
                if ((false == reader.IsDBNull(15))) {
                    this._LastLockoutDate = reader.GetDateTime(15);
                }
                if ((false == reader.IsDBNull(16))) {
                    this._FailedPasswordAttemptCount = reader.GetInt32(16);
                }
                if ((false == reader.IsDBNull(17))) {
                    this._FailedPasswordAttemptWindowStart = reader.GetDateTime(17);
                }
                if ((false == reader.IsDBNull(18))) {
                    this._FailedPasswordAnswerAttemptCount = reader.GetInt32(18);
                }
                if ((false == reader.IsDBNull(19))) {
                    this._FailedPasswordAnswerAttemptWindowStart = reader.GetDateTime(19);
                }
                if ((false == reader.IsDBNull(20))) {
                    this._Comment = reader.GetString(20);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._Application_ApplicationId = ((System.Guid)(this.GetGuid(row, 0)));
                }
                if ((false == row.IsNull(1))) {
                    this._UserId = ((System.Guid)(this.GetGuid(row, 1)));
                }
                if ((false == row.IsNull(2))) {
                    this._Password = ((string)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._PasswordFormat = ((int)(row[3]));
                }
                if ((false == row.IsNull(4))) {
                    this._PasswordSalt = ((string)(row[4]));
                }
                if ((false == row.IsNull(5))) {
                    this._MobilePIN = ((string)(row[5]));
                }
                if ((false == row.IsNull(6))) {
                    this._Email = ((string)(row[6]));
                }
                if ((false == row.IsNull(7))) {
                    this._LoweredEmail = ((string)(row[7]));
                }
                if ((false == row.IsNull(8))) {
                    this._PasswordQuestion = ((string)(row[8]));
                }
                if ((false == row.IsNull(9))) {
                    this._PasswordAnswer = ((string)(row[9]));
                }
                if ((false == row.IsNull(10))) {
                    this._IsApproved = ((bool)(row[10]));
                }
                if ((false == row.IsNull(11))) {
                    this._IsLockedOut = ((bool)(row[11]));
                }
                if ((false == row.IsNull(12))) {
                    this._CreateDate = ((System.DateTime)(row[12]));
                }
                if ((false == row.IsNull(13))) {
                    this._LastLoginDate = ((System.DateTime)(row[13]));
                }
                if ((false == row.IsNull(14))) {
                    this._LastPasswordChangedDate = ((System.DateTime)(row[14]));
                }
                if ((false == row.IsNull(15))) {
                    this._LastLockoutDate = ((System.DateTime)(row[15]));
                }
                if ((false == row.IsNull(16))) {
                    this._FailedPasswordAttemptCount = ((int)(row[16]));
                }
                if ((false == row.IsNull(17))) {
                    this._FailedPasswordAttemptWindowStart = ((System.DateTime)(row[17]));
                }
                if ((false == row.IsNull(18))) {
                    this._FailedPasswordAnswerAttemptCount = ((int)(row[18]));
                }
                if ((false == row.IsNull(19))) {
                    this._FailedPasswordAnswerAttemptWindowStart = ((System.DateTime)(row[19]));
                }
                if ((false == row.IsNull(20))) {
                    this._Comment = ((string)(row[20]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::NBear.Web.Data.AspNetDbEntities.Membership).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::NBear.Web.Data.AspNetDbEntities.Membership)(obj)).isAttached) 
                            && (this.UserId == ((global::NBear.Web.Data.AspNetDbEntities.Membership)(obj)).UserId));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem ApplicationID = new NBear.Common.PropertyItem("Application", "NBear.Web.Data.AspNetDbEntities.Membership");
                
                public static NBear.Common.PropertyItem UserId = new NBear.Common.PropertyItem("UserId", "NBear.Web.Data.AspNetDbEntities.Membership");
                
                public static NBear.Common.PropertyItem Password = new NBear.Common.PropertyItem("Password", "NBear.Web.Data.AspNetDbEntities.Membership");
                
                public static NBear.Common.PropertyItem PasswordFormat = new NBear.Common.PropertyItem("PasswordFormat", "NBear.Web.Data.AspNetDbEntities.Membership");
                
                public static NBear.Common.PropertyItem PasswordSalt = new NBear.Common.PropertyItem("PasswordSalt", "NBear.Web.Data.AspNetDbEntities.Membership");
                
                public static NBear.Common.PropertyItem MobilePIN = new NBear.Common.PropertyItem("MobilePIN", "NBear.Web.Data.AspNetDbEntities.Membership");
                
                public static NBear.Common.PropertyItem Email = new NBear.Common.PropertyItem("Email", "NBear.Web.Data.AspNetDbEntities.Membership");
                
                public static NBear.Common.PropertyItem LoweredEmail = new NBear.Common.PropertyItem("LoweredEmail", "NBear.Web.Data.AspNetDbEntities.Membership");
                
                public static NBear.Common.PropertyItem PasswordQuestion = new NBear.Common.PropertyItem("PasswordQuestion", "NBear.Web.Data.AspNetDbEntities.Membership");
                
                public static NBear.Common.PropertyItem PasswordAnswer = new NBear.Common.PropertyItem("PasswordAnswer", "NBear.Web.Data.AspNetDbEntities.Membership");
                
                public static NBear.Common.PropertyItem IsApproved = new NBear.Common.PropertyItem("IsApproved", "NBear.Web.Data.AspNetDbEntities.Membership");
                
                public static NBear.Common.PropertyItem IsLockedOut = new NBear.Common.PropertyItem("IsLockedOut", "NBear.Web.Data.AspNetDbEntities.Membership");
                
                public static NBear.Common.PropertyItem CreateDate = new NBear.Common.PropertyItem("CreateDate", "NBear.Web.Data.AspNetDbEntities.Membership");
                
                public static NBear.Common.PropertyItem LastLoginDate = new NBear.Common.PropertyItem("LastLoginDate", "NBear.Web.Data.AspNetDbEntities.Membership");
                
                public static NBear.Common.PropertyItem LastPasswordChangedDate = new NBear.Common.PropertyItem("LastPasswordChangedDate", "NBear.Web.Data.AspNetDbEntities.Membership");
                
                public static NBear.Common.PropertyItem LastLockoutDate = new NBear.Common.PropertyItem("LastLockoutDate", "NBear.Web.Data.AspNetDbEntities.Membership");
                
                public static NBear.Common.PropertyItem FailedPasswordAttemptCount = new NBear.Common.PropertyItem("FailedPasswordAttemptCount", "NBear.Web.Data.AspNetDbEntities.Membership");
                
                public static NBear.Common.PropertyItem FailedPasswordAttemptWindowStart = new NBear.Common.PropertyItem("FailedPasswordAttemptWindowStart", "NBear.Web.Data.AspNetDbEntities.Membership");
                
                public static NBear.Common.PropertyItem FailedPasswordAnswerAttemptCount = new NBear.Common.PropertyItem("FailedPasswordAnswerAttemptCount", "NBear.Web.Data.AspNetDbEntities.Membership");
                
                public static NBear.Common.PropertyItem FailedPasswordAnswerAttemptWindowStart = new NBear.Common.PropertyItem("FailedPasswordAnswerAttemptWindowStart", "NBear.Web.Data.AspNetDbEntities.Membership");
                
                public static NBear.Common.PropertyItem Comment = new NBear.Common.PropertyItem("Comment", "NBear.Web.Data.AspNetDbEntities.Membership");
                
                private _() {
                }
            }
        }
    }
    namespace NBear.Web.Data.AspNetDbEntities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class ProfileArrayList : NBear.Common.EntityArrayList<NBear.Web.Data.AspNetDbEntities.Profile> {
        }
        
        [System.SerializableAttribute()]
        [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"NBear.Web.Data.AspNetDbEntities.Profile\" isReadOnly=\"true\" isAutoPreLoad=\"" +
        "false\" isBatchUpdate=\"false\" isRelation=\"false\" mappingName=\"aspnet_Profile\" bat" +
        "chSize=\"10\">\r\n  <Properties>\r\n    <Property name=\"UserId\" type=\"System.Guid\" isI" +
        "nherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" i" +
        "sQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIn" +
        "dexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" ma" +
        "ppingName=\"UserId\" mappingColumnType=\"System.Guid\" sqlType=\"uniqueidentifier\" is" +
        "PrimaryKey=\"true\" isNotNull=\"true\" />\r\n    <Property name=\"PropertyNames\" type=\"" +
        "System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isC" +
        "ontained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelati" +
        "onKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializatio" +
        "nIgnore=\"false\" mappingName=\"PropertyNames\" mappingColumnType=\"System.String\" sq" +
        "lType=\"ntext\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Pro" +
        "pertyValuesString\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" i" +
        "sCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" is" +
        "LazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDe" +
        "sc=\"false\" isSerializationIgnore=\"false\" mappingName=\"PropertyValuesString\" mapp" +
        "ingColumnType=\"System.String\" sqlType=\"ntext\" isPrimaryKey=\"false\" isNotNull=\"fa" +
        "lse\" />\r\n    <Property name=\"PropertyValuesBinary\" type=\"System.Byte[]\" isInheri" +
        "ted=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuer" +
        "y=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPr" +
        "operty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mapping" +
        "Name=\"PropertyValuesBinary\" mappingColumnType=\"System.Byte[]\" sqlType=\"image\" is" +
        "PrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"LastUpdatedDate\" ty" +
        "pe=\"System.DateTime\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"fals" +
        "e\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" is" +
        "RelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerial" +
        "izationIgnore=\"false\" mappingName=\"LastUpdatedDate\" mappingColumnType=\"System.Da" +
        "teTime\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Proper" +
        "ties>\r\n</EntityConfiguration>")]
        public partial class Profile : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _ProfileEntityConfiguration;
            
            protected global::System.Guid _UserId;
            
            protected string _PropertyNames;
            
            protected string _PropertyValuesString;
            
            protected byte[] _PropertyValuesBinary;
            
            protected global::System.DateTime _LastUpdatedDate;
            
    		public static bool operator ==(global::NBear.Web.Data.AspNetDbEntities.Profile left, global::NBear.Web.Data.AspNetDbEntities.Profile right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::NBear.Web.Data.AspNetDbEntities.Profile left, global::NBear.Web.Data.AspNetDbEntities.Profile right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public global::System.Guid UserId {
                get {
                    return this._UserId;
                }
                set {
                    this.OnPropertyChanged("UserId", this._UserId, value);
                    this._UserId = value;
                }
            }
            
            public string PropertyNames {
                get {
                    return this._PropertyNames;
                }
                set {
                    this.OnPropertyChanged("PropertyNames", this._PropertyNames, value);
                    this._PropertyNames = value;
                }
            }
            
            public string PropertyValuesString {
                get {
                    return this._PropertyValuesString;
                }
                set {
                    this.OnPropertyChanged("PropertyValuesString", this._PropertyValuesString, value);
                    this._PropertyValuesString = value;
                }
            }
            
            public byte[] PropertyValuesBinary {
                get {
                    return this._PropertyValuesBinary;
                }
                set {
                    this.OnPropertyChanged("PropertyValuesBinary", this._PropertyValuesBinary, value);
                    this._PropertyValuesBinary = value;
                }
            }
            
            public global::System.DateTime LastUpdatedDate {
                get {
                    return this._LastUpdatedDate;
                }
                set {
                    this.OnPropertyChanged("LastUpdatedDate", this._LastUpdatedDate, value);
                    this._LastUpdatedDate = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((Profile._ProfileEntityConfiguration == null)) {
                    Profile._ProfileEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("NBear.Web.Data.AspNetDbEntities.Profile");
                }
                return Profile._ProfileEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._UserId,
                        this._PropertyNames,
                        this._PropertyValuesString,
                        this._PropertyValuesBinary,
                        this._LastUpdatedDate};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._UserId = this.GetGuid(reader, 0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._PropertyNames = reader.GetString(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._PropertyValuesString = reader.GetString(2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._PropertyValuesBinary = ((byte[])(reader.GetValue(3)));
                }
                if ((false == reader.IsDBNull(4))) {
                    this._LastUpdatedDate = reader.GetDateTime(4);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._UserId = ((System.Guid)(this.GetGuid(row, 0)));
                }
                if ((false == row.IsNull(1))) {
                    this._PropertyNames = ((string)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._PropertyValuesString = ((string)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._PropertyValuesBinary = ((byte[])(row[3]));
                }
                if ((false == row.IsNull(4))) {
                    this._LastUpdatedDate = ((System.DateTime)(row[4]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::NBear.Web.Data.AspNetDbEntities.Profile).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::NBear.Web.Data.AspNetDbEntities.Profile)(obj)).isAttached) 
                            && (this.UserId == ((global::NBear.Web.Data.AspNetDbEntities.Profile)(obj)).UserId));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem UserId = new NBear.Common.PropertyItem("UserId", "NBear.Web.Data.AspNetDbEntities.Profile");
                
                public static NBear.Common.PropertyItem PropertyNames = new NBear.Common.PropertyItem("PropertyNames", "NBear.Web.Data.AspNetDbEntities.Profile");
                
                public static NBear.Common.PropertyItem PropertyValuesString = new NBear.Common.PropertyItem("PropertyValuesString", "NBear.Web.Data.AspNetDbEntities.Profile");
                
                public static NBear.Common.PropertyItem PropertyValuesBinary = new NBear.Common.PropertyItem("PropertyValuesBinary", "NBear.Web.Data.AspNetDbEntities.Profile");
                
                public static NBear.Common.PropertyItem LastUpdatedDate = new NBear.Common.PropertyItem("LastUpdatedDate", "NBear.Web.Data.AspNetDbEntities.Profile");
                
                private _() {
                }
            }
        }
    }
    namespace NBear.Web.Data.AspNetDbEntities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class RoleArrayList : NBear.Common.EntityArrayList<NBear.Web.Data.AspNetDbEntities.Role> {
        }
        
        [System.SerializableAttribute()]
        [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"NBear.Web.Data.AspNetDbEntities.Role\" isReadOnly=\"true\" isAutoPreLoad=\"fal" +
        "se\" isBatchUpdate=\"false\" isRelation=\"false\" mappingName=\"aspnet_Roles\" batchSiz" +
        "e=\"10\">\r\n  <Properties>\r\n    <Property name=\"Application\" type=\"NBear.Web.Data.A" +
        "spNetDbEntities.Application\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUn" +
        "it=\"false\" isContained=\"false\" isQuery=\"true\" isFriendKey=\"false\" isLazyLoad=\"tr" +
        "ue\" queryWhere=\"{ApplicationId} = @Application\" queryType=\"FkReverseQuery\" isRel" +
        "ationKey=\"false\" relatedType=\"NBear.Web.Data.AspNetDbEntities.Application\" relat" +
        "edForeignKey=\"ApplicationId\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\"" +
        " isSerializationIgnore=\"false\" mappingName=\"ApplicationId\" mappingColumnType=\"Sy" +
        "stem.Nullable`1[System.Guid]\" sqlType=\"uniqueidentifier\" isPrimaryKey=\"false\" is" +
        "NotNull=\"false\" />\r\n    <Property name=\"RoleId\" type=\"System.Guid\" isInherited=\"" +
        "false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fa" +
        "lse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPropert" +
        "y=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=" +
        "\"RoleId\" mappingColumnType=\"System.Guid\" sqlType=\"uniqueidentifier\" isPrimaryKey" +
        "=\"true\" isNotNull=\"true\" />\r\n    <Property name=\"RoleName\" type=\"System.String\" " +
        "isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false" +
        "\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" i" +
        "sIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\"" +
        " mappingName=\"RoleName\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(256)" +
        "\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"LoweredRoleName" +
        "\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"fa" +
        "lse\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" " +
        "isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSeri" +
        "alizationIgnore=\"false\" mappingName=\"LoweredRoleName\" mappingColumnType=\"System." +
        "String\" sqlType=\"nvarchar(256)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <" +
        "Property name=\"Description\" type=\"System.String\" isInherited=\"false\" isReadOnly=" +
        "\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"" +
        "false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexP" +
        "ropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Description\" mapp" +
        "ingColumnType=\"System.String\" sqlType=\"nvarchar(256)\" isPrimaryKey=\"false\" isNot" +
        "Null=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
        public partial class Role : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _RoleEntityConfiguration;
            
            protected global::NBear.Web.Data.AspNetDbEntities.Application _Application;
            
            protected global::System.Guid? _Application_ApplicationId;
            
            protected global::System.Guid _RoleId;
            
            protected string _RoleName;
            
            protected string _LoweredRoleName;
            
            protected string _Description;
            
    		public static bool operator ==(global::NBear.Web.Data.AspNetDbEntities.Role left, global::NBear.Web.Data.AspNetDbEntities.Role right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::NBear.Web.Data.AspNetDbEntities.Role left, global::NBear.Web.Data.AspNetDbEntities.Role right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public global::NBear.Web.Data.AspNetDbEntities.Application Application {
                get {
                    if (this.IsQueryPropertyLoaded("Application")) {
                    }
                    else {
                        global::NBear.Web.Data.AspNetDbEntities.Application _obj;
                        _obj = ((global::NBear.Web.Data.AspNetDbEntities.Application)(this.QueryOne(typeof(global::NBear.Web.Data.AspNetDbEntities.Application), "Application", this)));
                        this.OnQueryOnePropertyChanged("Application", this._Application, _obj);
                        this._Application = _obj;
                    }
                    return this._Application;
                }
                set {
                    this.OnQueryOnePropertyChanged("Application", this.Application, value);
                    this._Application = value;
                    if ((value == null)) {
                        this.OnPropertyChanged("Application", this._Application_ApplicationId, null);
                        this._Application_ApplicationId = null;
                    }
                    else {
                        this.OnPropertyChanged("Application", this._Application_ApplicationId, value.ApplicationId);
                        this._Application_ApplicationId = value.ApplicationId;
                    }
                }
            }
            
            public global::System.Guid RoleId {
                get {
                    return this._RoleId;
                }
                set {
                    this.OnPropertyChanged("RoleId", this._RoleId, value);
                    this._RoleId = value;
                }
            }
            
            public string RoleName {
                get {
                    return this._RoleName;
                }
                set {
                    this.OnPropertyChanged("RoleName", this._RoleName, value);
                    this._RoleName = value;
                }
            }
            
            public string LoweredRoleName {
                get {
                    return this._LoweredRoleName;
                }
                set {
                    this.OnPropertyChanged("LoweredRoleName", this._LoweredRoleName, value);
                    this._LoweredRoleName = value;
                }
            }
            
            public string Description {
                get {
                    return this._Description;
                }
                set {
                    this.OnPropertyChanged("Description", this._Description, value);
                    this._Description = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((Role._RoleEntityConfiguration == null)) {
                    Role._RoleEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("NBear.Web.Data.AspNetDbEntities.Role");
                }
                return Role._RoleEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("NBear.Web.Data.AspNetDbEntities.Role", "Application")))) {
                    global::NBear.Web.Data.AspNetDbEntities.Application _obj;
                    _obj = ((global::NBear.Web.Data.AspNetDbEntities.Application)(this.QueryOne(typeof(global::NBear.Web.Data.AspNetDbEntities.Application), "Application", this)));
                    this.OnQueryOnePropertyChanged("Application", this._Application, _obj);
                    this._Application = _obj;
                }
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._Application_ApplicationId,
                        this._RoleId,
                        this._RoleName,
                        this._LoweredRoleName,
                        this._Description};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._Application_ApplicationId = this.GetGuid(reader, 0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._RoleId = this.GetGuid(reader, 1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._RoleName = reader.GetString(2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._LoweredRoleName = reader.GetString(3);
                }
                if ((false == reader.IsDBNull(4))) {
                    this._Description = reader.GetString(4);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._Application_ApplicationId = ((System.Guid)(this.GetGuid(row, 0)));
                }
                if ((false == row.IsNull(1))) {
                    this._RoleId = ((System.Guid)(this.GetGuid(row, 1)));
                }
                if ((false == row.IsNull(2))) {
                    this._RoleName = ((string)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._LoweredRoleName = ((string)(row[3]));
                }
                if ((false == row.IsNull(4))) {
                    this._Description = ((string)(row[4]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::NBear.Web.Data.AspNetDbEntities.Role).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::NBear.Web.Data.AspNetDbEntities.Role)(obj)).isAttached) 
                            && (this.RoleId == ((global::NBear.Web.Data.AspNetDbEntities.Role)(obj)).RoleId));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem ApplicationID = new NBear.Common.PropertyItem("Application", "NBear.Web.Data.AspNetDbEntities.Role");
                
                public static NBear.Common.PropertyItem RoleId = new NBear.Common.PropertyItem("RoleId", "NBear.Web.Data.AspNetDbEntities.Role");
                
                public static NBear.Common.PropertyItem RoleName = new NBear.Common.PropertyItem("RoleName", "NBear.Web.Data.AspNetDbEntities.Role");
                
                public static NBear.Common.PropertyItem LoweredRoleName = new NBear.Common.PropertyItem("LoweredRoleName", "NBear.Web.Data.AspNetDbEntities.Role");
                
                public static NBear.Common.PropertyItem Description = new NBear.Common.PropertyItem("Description", "NBear.Web.Data.AspNetDbEntities.Role");
                
                private _() {
                }
            }
        }
    }
    namespace NBear.Web.Data.AspNetDbEntities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class UserArrayList : NBear.Common.EntityArrayList<NBear.Web.Data.AspNetDbEntities.User> {
        }
        
        [System.SerializableAttribute()]
        [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"NBear.Web.Data.AspNetDbEntities.User\" isReadOnly=\"true\" isAutoPreLoad=\"fal" +
        "se\" isBatchUpdate=\"false\" isRelation=\"false\" mappingName=\"aspnet_Users\" batchSiz" +
        "e=\"10\">\r\n  <Properties>\r\n    <Property name=\"Application\" type=\"NBear.Web.Data.A" +
        "spNetDbEntities.Application\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUn" +
        "it=\"false\" isContained=\"false\" isQuery=\"true\" isFriendKey=\"false\" isLazyLoad=\"tr" +
        "ue\" queryWhere=\"{ApplicationId} = @Application\" queryType=\"FkReverseQuery\" isRel" +
        "ationKey=\"false\" relatedType=\"NBear.Web.Data.AspNetDbEntities.Application\" relat" +
        "edForeignKey=\"ApplicationId\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\"" +
        " isSerializationIgnore=\"false\" mappingName=\"ApplicationId\" mappingColumnType=\"Sy" +
        "stem.Nullable`1[System.Guid]\" sqlType=\"uniqueidentifier\" isPrimaryKey=\"false\" is" +
        "NotNull=\"false\" />\r\n    <Property name=\"UserId\" type=\"System.Guid\" isInherited=\"" +
        "false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fa" +
        "lse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPropert" +
        "y=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=" +
        "\"UserId\" mappingColumnType=\"System.Guid\" sqlType=\"uniqueidentifier\" isPrimaryKey" +
        "=\"true\" isNotNull=\"true\" />\r\n    <Property name=\"UserName\" type=\"System.String\" " +
        "isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false" +
        "\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" i" +
        "sIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\"" +
        " mappingName=\"UserName\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(256)" +
        "\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"LoweredUserName" +
        "\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"fa" +
        "lse\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" " +
        "isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSeri" +
        "alizationIgnore=\"false\" mappingName=\"LoweredUserName\" mappingColumnType=\"System." +
        "String\" sqlType=\"nvarchar(256)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <" +
        "Property name=\"MobileAlias\" type=\"System.String\" isInherited=\"false\" isReadOnly=" +
        "\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"" +
        "false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexP" +
        "ropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"MobileAlias\" mapp" +
        "ingColumnType=\"System.String\" sqlType=\"nvarchar(16)\" isPrimaryKey=\"false\" isNotN" +
        "ull=\"false\" />\r\n    <Property name=\"IsAnonymous\" type=\"System.Boolean\" isInherit" +
        "ed=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery" +
        "=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPro" +
        "perty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingN" +
        "ame=\"IsAnonymous\" mappingColumnType=\"System.Boolean\" sqlType=\"bit\" isPrimaryKey=" +
        "\"false\" isNotNull=\"false\" />\r\n    <Property name=\"LastActivityDate\" type=\"System" +
        ".DateTime\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isConta" +
        "ined=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKe" +
        "y=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgn" +
        "ore=\"false\" mappingName=\"LastActivityDate\" mappingColumnType=\"System.DateTime\" s" +
        "qlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=" +
        "\"Profile\" type=\"NBear.Web.Data.AspNetDbEntities.Profile\" isInherited=\"false\" isR" +
        "eadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"true\" isQuery=\"true\" isFrien" +
        "dKey=\"false\" isLazyLoad=\"true\" queryWhere=\"{UserId} = @UserId\" queryType=\"PkQuer" +
        "y\" isRelationKey=\"false\" relatedType=\"NBear.Web.Data.AspNetDbEntities.Profile\" r" +
        "elatedForeignKey=\"UserId\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" is" +
        "SerializationIgnore=\"false\" mappingName=\"Profile\" mappingColumnType=\"NBear.Web.D" +
        "ata.AspNetDbEntities.Profile\" sqlType=\"ntext\" isPrimaryKey=\"false\" isNotNull=\"fa" +
        "lse\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
        public partial class User : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _UserEntityConfiguration;
            
            protected global::NBear.Web.Data.AspNetDbEntities.Application _Application;
            
            protected global::System.Guid? _Application_ApplicationId;
            
            protected global::System.Guid _UserId;
            
            protected string _UserName;
            
            protected string _LoweredUserName;
            
            protected string _MobileAlias;
            
            protected bool _IsAnonymous;
            
            protected global::System.DateTime _LastActivityDate;
            
            protected global::NBear.Web.Data.AspNetDbEntities.Profile _Profile;
            
    		public static bool operator ==(global::NBear.Web.Data.AspNetDbEntities.User left, global::NBear.Web.Data.AspNetDbEntities.User right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::NBear.Web.Data.AspNetDbEntities.User left, global::NBear.Web.Data.AspNetDbEntities.User right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public global::NBear.Web.Data.AspNetDbEntities.Application Application {
                get {
                    if (this.IsQueryPropertyLoaded("Application")) {
                    }
                    else {
                        global::NBear.Web.Data.AspNetDbEntities.Application _obj;
                        _obj = ((global::NBear.Web.Data.AspNetDbEntities.Application)(this.QueryOne(typeof(global::NBear.Web.Data.AspNetDbEntities.Application), "Application", this)));
                        this.OnQueryOnePropertyChanged("Application", this._Application, _obj);
                        this._Application = _obj;
                    }
                    return this._Application;
                }
                set {
                    this.OnQueryOnePropertyChanged("Application", this.Application, value);
                    this._Application = value;
                    if ((value == null)) {
                        this.OnPropertyChanged("Application", this._Application_ApplicationId, null);
                        this._Application_ApplicationId = null;
                    }
                    else {
                        this.OnPropertyChanged("Application", this._Application_ApplicationId, value.ApplicationId);
                        this._Application_ApplicationId = value.ApplicationId;
                    }
                }
            }
            
            public global::System.Guid UserId {
                get {
                    return this._UserId;
                }
                set {
                    this.OnPropertyChanged("UserId", this._UserId, value);
                    this._UserId = value;
                }
            }
            
            public string UserName {
                get {
                    return this._UserName;
                }
                set {
                    this.OnPropertyChanged("UserName", this._UserName, value);
                    this._UserName = value;
                }
            }
            
            public string LoweredUserName {
                get {
                    return this._LoweredUserName;
                }
                set {
                    this.OnPropertyChanged("LoweredUserName", this._LoweredUserName, value);
                    this._LoweredUserName = value;
                }
            }
            
            public string MobileAlias {
                get {
                    return this._MobileAlias;
                }
                set {
                    this.OnPropertyChanged("MobileAlias", this._MobileAlias, value);
                    this._MobileAlias = value;
                }
            }
            
            public bool IsAnonymous {
                get {
                    return this._IsAnonymous;
                }
                set {
                    this.OnPropertyChanged("IsAnonymous", this._IsAnonymous, value);
                    this._IsAnonymous = value;
                }
            }
            
            public global::System.DateTime LastActivityDate {
                get {
                    return this._LastActivityDate;
                }
                set {
                    this.OnPropertyChanged("LastActivityDate", this._LastActivityDate, value);
                    this._LastActivityDate = value;
                }
            }
            
            public global::NBear.Web.Data.AspNetDbEntities.Profile Profile {
                get {
                    if (this.IsQueryPropertyLoaded("Profile")) {
                    }
                    else {
                        global::NBear.Web.Data.AspNetDbEntities.Profile _obj;
                        _obj = ((global::NBear.Web.Data.AspNetDbEntities.Profile)(this.QueryOne(typeof(global::NBear.Web.Data.AspNetDbEntities.Profile), "Profile", this)));
                        this.OnQueryOnePropertyChanged("Profile", this._Profile, _obj);
                        this._Profile = _obj;
                    }
                    return this._Profile;
                }
                set {
                    this.OnQueryOnePropertyChanged("Profile", this.Profile, value);
                    this._Profile = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((User._UserEntityConfiguration == null)) {
                    User._UserEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("NBear.Web.Data.AspNetDbEntities.User");
                }
                return User._UserEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("NBear.Web.Data.AspNetDbEntities.User", "Application")))) {
                    global::NBear.Web.Data.AspNetDbEntities.Application _obj;
                    _obj = ((global::NBear.Web.Data.AspNetDbEntities.Application)(this.QueryOne(typeof(global::NBear.Web.Data.AspNetDbEntities.Application), "Application", this)));
                    this.OnQueryOnePropertyChanged("Application", this._Application, _obj);
                    this._Application = _obj;
                }
                if ((includeLazyLoadQueries 
                            || (false == NBear.Common.MetaDataManager.IsLazyLoad("NBear.Web.Data.AspNetDbEntities.User", "Profile")))) {
                    global::NBear.Web.Data.AspNetDbEntities.Profile _obj;
                    _obj = ((global::NBear.Web.Data.AspNetDbEntities.Profile)(this.QueryOne(typeof(global::NBear.Web.Data.AspNetDbEntities.Profile), "Profile", this)));
                    this.OnQueryOnePropertyChanged("Profile", this._Profile, _obj);
                    this._Profile = _obj;
                }
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._Application_ApplicationId,
                        this._UserId,
                        this._UserName,
                        this._LoweredUserName,
                        this._MobileAlias,
                        this._IsAnonymous,
                        this._LastActivityDate};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._Application_ApplicationId = this.GetGuid(reader, 0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._UserId = this.GetGuid(reader, 1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._UserName = reader.GetString(2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._LoweredUserName = reader.GetString(3);
                }
                if ((false == reader.IsDBNull(4))) {
                    this._MobileAlias = reader.GetString(4);
                }
                if ((false == reader.IsDBNull(5))) {
                    this._IsAnonymous = reader.GetBoolean(5);
                }
                if ((false == reader.IsDBNull(6))) {
                    this._LastActivityDate = reader.GetDateTime(6);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._Application_ApplicationId = ((System.Guid)(this.GetGuid(row, 0)));
                }
                if ((false == row.IsNull(1))) {
                    this._UserId = ((System.Guid)(this.GetGuid(row, 1)));
                }
                if ((false == row.IsNull(2))) {
                    this._UserName = ((string)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._LoweredUserName = ((string)(row[3]));
                }
                if ((false == row.IsNull(4))) {
                    this._MobileAlias = ((string)(row[4]));
                }
                if ((false == row.IsNull(5))) {
                    this._IsAnonymous = ((bool)(row[5]));
                }
                if ((false == row.IsNull(6))) {
                    this._LastActivityDate = ((System.DateTime)(row[6]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::NBear.Web.Data.AspNetDbEntities.User).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::NBear.Web.Data.AspNetDbEntities.User)(obj)).isAttached) 
                            && (this.UserId == ((global::NBear.Web.Data.AspNetDbEntities.User)(obj)).UserId));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem ApplicationID = new NBear.Common.PropertyItem("Application", "NBear.Web.Data.AspNetDbEntities.User");
                
                public static NBear.Common.PropertyItem UserId = new NBear.Common.PropertyItem("UserId", "NBear.Web.Data.AspNetDbEntities.User");
                
                public static NBear.Common.PropertyItem UserName = new NBear.Common.PropertyItem("UserName", "NBear.Web.Data.AspNetDbEntities.User");
                
                public static NBear.Common.PropertyItem LoweredUserName = new NBear.Common.PropertyItem("LoweredUserName", "NBear.Web.Data.AspNetDbEntities.User");
                
                public static NBear.Common.PropertyItem MobileAlias = new NBear.Common.PropertyItem("MobileAlias", "NBear.Web.Data.AspNetDbEntities.User");
                
                public static NBear.Common.PropertyItem IsAnonymous = new NBear.Common.PropertyItem("IsAnonymous", "NBear.Web.Data.AspNetDbEntities.User");
                
                public static NBear.Common.PropertyItem LastActivityDate = new NBear.Common.PropertyItem("LastActivityDate", "NBear.Web.Data.AspNetDbEntities.User");
                
                private _() {
                }
            }
        }
    }
    namespace NBear.Web.Data.AspNetDbEntities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class UserInRoleArrayList : NBear.Common.EntityArrayList<NBear.Web.Data.AspNetDbEntities.UserInRole> {
        }
        
        [System.SerializableAttribute()]
        [NBear.Common.EmbeddedEntityConfigurationAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<EntityConfiguration xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" name=""NBear.Web.Data.AspNetDbEntities.UserInRole"" isReadOnly=""true"" isAutoPreLoad=""false"" isBatchUpdate=""false"" isRelation=""false"" mappingName=""aspnet_UsersInRoles"" batchSize=""10"">
  <Properties>
    <Property name=""UserId"" type=""System.Guid"" isInherited=""false"" isReadOnly=""false"" isCompoundUnit=""false"" isContained=""false"" isQuery=""false"" isFriendKey=""false"" isLazyLoad=""false"" isRelationKey=""false"" isIndexProperty=""false"" isIndexPropertyDesc=""false"" isSerializationIgnore=""false"" mappingName=""UserId"" mappingColumnType=""System.Guid"" sqlType=""uniqueidentifier"" isPrimaryKey=""true"" isNotNull=""true"" />
    <Property name=""RoleId"" type=""System.Guid"" isInherited=""false"" isReadOnly=""false"" isCompoundUnit=""false"" isContained=""false"" isQuery=""false"" isFriendKey=""false"" isLazyLoad=""false"" isRelationKey=""false"" isIndexProperty=""false"" isIndexPropertyDesc=""false"" isSerializationIgnore=""false"" mappingName=""RoleId"" mappingColumnType=""System.Guid"" sqlType=""uniqueidentifier"" isPrimaryKey=""true"" isNotNull=""true"" />
  </Properties>
</EntityConfiguration>")]
        public partial class UserInRole : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _UserInRoleEntityConfiguration;
            
            protected global::System.Guid _UserId;
            
            protected global::System.Guid _RoleId;
            
    		public static bool operator ==(global::NBear.Web.Data.AspNetDbEntities.UserInRole left, global::NBear.Web.Data.AspNetDbEntities.UserInRole right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::NBear.Web.Data.AspNetDbEntities.UserInRole left, global::NBear.Web.Data.AspNetDbEntities.UserInRole right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public global::System.Guid UserId {
                get {
                    return this._UserId;
                }
                set {
                    this.OnPropertyChanged("UserId", this._UserId, value);
                    this._UserId = value;
                }
            }
            
            public global::System.Guid RoleId {
                get {
                    return this._RoleId;
                }
                set {
                    this.OnPropertyChanged("RoleId", this._RoleId, value);
                    this._RoleId = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((UserInRole._UserInRoleEntityConfiguration == null)) {
                    UserInRole._UserInRoleEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("NBear.Web.Data.AspNetDbEntities.UserInRole");
                }
                return UserInRole._UserInRoleEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._UserId,
                        this._RoleId};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._UserId = this.GetGuid(reader, 0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._RoleId = this.GetGuid(reader, 1);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._UserId = ((System.Guid)(this.GetGuid(row, 0)));
                }
                if ((false == row.IsNull(1))) {
                    this._RoleId = ((System.Guid)(this.GetGuid(row, 1)));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::NBear.Web.Data.AspNetDbEntities.UserInRole).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return (((this.isAttached && ((global::NBear.Web.Data.AspNetDbEntities.UserInRole)(obj)).isAttached) 
                            && (this.UserId == ((global::NBear.Web.Data.AspNetDbEntities.UserInRole)(obj)).UserId)) 
                            && (this.RoleId == ((global::NBear.Web.Data.AspNetDbEntities.UserInRole)(obj)).RoleId));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem UserId = new NBear.Common.PropertyItem("UserId", "NBear.Web.Data.AspNetDbEntities.UserInRole");
                
                public static NBear.Common.PropertyItem RoleId = new NBear.Common.PropertyItem("RoleId", "NBear.Web.Data.AspNetDbEntities.UserInRole");
                
                private _() {
                }
            }
        }
    }
    namespace NBear.Web.Data.AspNetDbEntities {
        using System;
        using System.Xml.Serialization;
        using NBear.Common;
        
        
        [System.SerializableAttribute()]
        public partial class vMembershipUserArrayList : NBear.Common.EntityArrayList<NBear.Web.Data.AspNetDbEntities.vMembershipUser> {
        }
        
        [System.SerializableAttribute()]
        [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"NBear.Web.Data.AspNetDbEntities.vMembershipUser\" isReadOnly=\"true\" isAutoP" +
        "reLoad=\"false\" isBatchUpdate=\"false\" isRelation=\"false\" mappingName=\"vw_aspnet_M" +
        "embershipUsers\" batchSize=\"10\">\r\n  <Properties>\r\n    <Property name=\"UserId\" typ" +
        "e=\"System.Guid\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isC" +
        "ontained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelati" +
        "onKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializatio" +
        "nIgnore=\"false\" mappingName=\"UserId\" mappingColumnType=\"System.Guid\" sqlType=\"un" +
        "iqueidentifier\" isPrimaryKey=\"true\" isNotNull=\"true\" />\r\n    <Property name=\"Pas" +
        "swordFormat\" type=\"System.Int32\" isInherited=\"false\" isReadOnly=\"true\" isCompoun" +
        "dUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad" +
        "=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"fals" +
        "e\" isSerializationIgnore=\"false\" mappingName=\"PasswordFormat\" mappingColumnType=" +
        "\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Pro" +
        "perty name=\"MobilePIN\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true" +
        "\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\"" +
        " isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropert" +
        "yDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"MobilePIN\" mappingColum" +
        "nType=\"System.String\" sqlType=\"nvarchar(16)\" isPrimaryKey=\"false\" isNotNull=\"fal" +
        "se\" />\r\n    <Property name=\"Email\" type=\"System.String\" isInherited=\"false\" isRe" +
        "adOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrien" +
        "dKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" is" +
        "IndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Email\" mapp" +
        "ingColumnType=\"System.String\" sqlType=\"nvarchar(256)\" isPrimaryKey=\"false\" isNot" +
        "Null=\"false\" />\r\n    <Property name=\"LoweredEmail\" type=\"System.String\" isInheri" +
        "ted=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery" +
        "=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPro" +
        "perty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingN" +
        "ame=\"LoweredEmail\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(256)\" isP" +
        "rimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"PasswordQuestion\" ty" +
        "pe=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" " +
        "isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRel" +
        "ationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializa" +
        "tionIgnore=\"false\" mappingName=\"PasswordQuestion\" mappingColumnType=\"System.Stri" +
        "ng\" sqlType=\"nvarchar(256)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Prop" +
        "erty name=\"PasswordAnswer\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"" +
        "true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"fa" +
        "lse\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPro" +
        "pertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"PasswordAnswer\" map" +
        "pingColumnType=\"System.String\" sqlType=\"nvarchar(128)\" isPrimaryKey=\"false\" isNo" +
        "tNull=\"false\" />\r\n    <Property name=\"IsApproved\" type=\"System.Boolean\" isInheri" +
        "ted=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery" +
        "=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPro" +
        "perty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingN" +
        "ame=\"IsApproved\" mappingColumnType=\"System.Boolean\" sqlType=\"bit\" isPrimaryKey=\"" +
        "false\" isNotNull=\"false\" />\r\n    <Property name=\"IsLockedOut\" type=\"System.Boole" +
        "an\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"fa" +
        "lse\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false" +
        "\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fal" +
        "se\" mappingName=\"IsLockedOut\" mappingColumnType=\"System.Boolean\" sqlType=\"bit\" i" +
        "sPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"CreateDate\" type=\"" +
        "System.DateTime\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" is" +
        "Contained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelat" +
        "ionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializati" +
        "onIgnore=\"false\" mappingName=\"CreateDate\" mappingColumnType=\"System.DateTime\" sq" +
        "lType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"" +
        "LastLoginDate\" type=\"System.DateTime\" isInherited=\"false\" isReadOnly=\"true\" isCo" +
        "mpoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLaz" +
        "yLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=" +
        "\"false\" isSerializationIgnore=\"false\" mappingName=\"LastLoginDate\" mappingColumnT" +
        "ype=\"System.DateTime\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" " +
        "/>\r\n    <Property name=\"LastPasswordChangedDate\" type=\"System.DateTime\" isInheri" +
        "ted=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery" +
        "=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPro" +
        "perty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingN" +
        "ame=\"LastPasswordChangedDate\" mappingColumnType=\"System.DateTime\" sqlType=\"datet" +
        "ime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"LastLockoutD" +
        "ate\" type=\"System.DateTime\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit" +
        "=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"fal" +
        "se\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" is" +
        "SerializationIgnore=\"false\" mappingName=\"LastLockoutDate\" mappingColumnType=\"Sys" +
        "tem.DateTime\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    " +
        "<Property name=\"FailedPasswordAttemptCount\" type=\"System.Int32\" isInherited=\"fal" +
        "se\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\"" +
        " isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"f" +
        "alse\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Fai" +
        "ledPasswordAttemptCount\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimar" +
        "yKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"FailedPasswordAttemptWind" +
        "owStart\" type=\"System.DateTime\" isInherited=\"false\" isReadOnly=\"true\" isCompound" +
        "Unit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=" +
        "\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false" +
        "\" isSerializationIgnore=\"false\" mappingName=\"FailedPasswordAttemptWindowStart\" m" +
        "appingColumnType=\"System.DateTime\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNot" +
        "Null=\"false\" />\r\n    <Property name=\"FailedPasswordAnswerAttemptCount\" type=\"Sys" +
        "tem.Int32\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContai" +
        "ned=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey" +
        "=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgno" +
        "re=\"false\" mappingName=\"FailedPasswordAnswerAttemptCount\" mappingColumnType=\"Sys" +
        "tem.Int32\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Propert" +
        "y name=\"FailedPasswordAnswerAttemptWindowStart\" type=\"System.DateTime\" isInherit" +
        "ed=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=" +
        "\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProp" +
        "erty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNa" +
        "me=\"FailedPasswordAnswerAttemptWindowStart\" mappingColumnType=\"System.DateTime\" " +
        "sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name" +
        "=\"Comment\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompound" +
        "Unit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=" +
        "\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false" +
        "\" isSerializationIgnore=\"false\" mappingName=\"Comment\" mappingColumnType=\"System." +
        "String\" sqlType=\"ntext\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property" +
        " name=\"ApplicationId\" type=\"System.Guid\" isInherited=\"false\" isReadOnly=\"true\" i" +
        "sCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" is" +
        "LazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDe" +
        "sc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ApplicationId\" mappingColu" +
        "mnType=\"System.Guid\" sqlType=\"uniqueidentifier\" isPrimaryKey=\"false\" isNotNull=\"" +
        "false\" />\r\n    <Property name=\"UserName\" type=\"System.String\" isInherited=\"false" +
        "\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" i" +
        "sFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fal" +
        "se\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"UserN" +
        "ame\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(256)\" isPrimaryKey=\"fal" +
        "se\" isNotNull=\"false\" />\r\n    <Property name=\"MobileAlias\" type=\"System.String\" " +
        "isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\"" +
        " isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" is" +
        "IndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" " +
        "mappingName=\"MobileAlias\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(16" +
        ")\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"IsAnonymous\" t" +
        "ype=\"System.Boolean\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false" +
        "\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isR" +
        "elationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSeriali" +
        "zationIgnore=\"false\" mappingName=\"IsAnonymous\" mappingColumnType=\"System.Boolean" +
        "\" sqlType=\"bit\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"L" +
        "astActivityDate\" type=\"System.DateTime\" isInherited=\"false\" isReadOnly=\"true\" is" +
        "CompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isL" +
        "azyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDes" +
        "c=\"false\" isSerializationIgnore=\"false\" mappingName=\"LastActivityDate\" mappingCo" +
        "lumnType=\"System.DateTime\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"fa" +
        "lse\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
        public partial class vMembershipUser : NBear.Common.Entity {
            
            protected static NBear.Common.EntityConfiguration _vMembershipUserEntityConfiguration;
            
            protected global::System.Guid _UserId;
            
            protected int _PasswordFormat;
            
            protected string _MobilePIN;
            
            protected string _Email;
            
            protected string _LoweredEmail;
            
            protected string _PasswordQuestion;
            
            protected string _PasswordAnswer;
            
            protected bool _IsApproved;
            
            protected bool _IsLockedOut;
            
            protected global::System.DateTime _CreateDate;
            
            protected global::System.DateTime _LastLoginDate;
            
            protected global::System.DateTime _LastPasswordChangedDate;
            
            protected global::System.DateTime _LastLockoutDate;
            
            protected int _FailedPasswordAttemptCount;
            
            protected global::System.DateTime _FailedPasswordAttemptWindowStart;
            
            protected int _FailedPasswordAnswerAttemptCount;
            
            protected global::System.DateTime _FailedPasswordAnswerAttemptWindowStart;
            
            protected string _Comment;
            
            protected global::System.Guid _ApplicationId;
            
            protected string _UserName;
            
            protected string _MobileAlias;
            
            protected bool _IsAnonymous;
            
            protected global::System.DateTime _LastActivityDate;
            
    		public static bool operator ==(global::NBear.Web.Data.AspNetDbEntities.vMembershipUser left, global::NBear.Web.Data.AspNetDbEntities.vMembershipUser right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


    		public static bool operator !=(global::NBear.Web.Data.AspNetDbEntities.vMembershipUser left, global::NBear.Web.Data.AspNetDbEntities.vMembershipUser right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


            
            public global::System.Guid UserId {
                get {
                    return this._UserId;
                }
                set {
                    this.OnPropertyChanged("UserId", this._UserId, value);
                    this._UserId = value;
                }
            }
            
            public int PasswordFormat {
                get {
                    return this._PasswordFormat;
                }
                set {
                    this.OnPropertyChanged("PasswordFormat", this._PasswordFormat, value);
                    this._PasswordFormat = value;
                }
            }
            
            public string MobilePIN {
                get {
                    return this._MobilePIN;
                }
                set {
                    this.OnPropertyChanged("MobilePIN", this._MobilePIN, value);
                    this._MobilePIN = value;
                }
            }
            
            public string Email {
                get {
                    return this._Email;
                }
                set {
                    this.OnPropertyChanged("Email", this._Email, value);
                    this._Email = value;
                }
            }
            
            public string LoweredEmail {
                get {
                    return this._LoweredEmail;
                }
                set {
                    this.OnPropertyChanged("LoweredEmail", this._LoweredEmail, value);
                    this._LoweredEmail = value;
                }
            }
            
            public string PasswordQuestion {
                get {
                    return this._PasswordQuestion;
                }
                set {
                    this.OnPropertyChanged("PasswordQuestion", this._PasswordQuestion, value);
                    this._PasswordQuestion = value;
                }
            }
            
            public string PasswordAnswer {
                get {
                    return this._PasswordAnswer;
                }
                set {
                    this.OnPropertyChanged("PasswordAnswer", this._PasswordAnswer, value);
                    this._PasswordAnswer = value;
                }
            }
            
            public bool IsApproved {
                get {
                    return this._IsApproved;
                }
                set {
                    this.OnPropertyChanged("IsApproved", this._IsApproved, value);
                    this._IsApproved = value;
                }
            }
            
            public bool IsLockedOut {
                get {
                    return this._IsLockedOut;
                }
                set {
                    this.OnPropertyChanged("IsLockedOut", this._IsLockedOut, value);
                    this._IsLockedOut = value;
                }
            }
            
            public global::System.DateTime CreateDate {
                get {
                    return this._CreateDate;
                }
                set {
                    this.OnPropertyChanged("CreateDate", this._CreateDate, value);
                    this._CreateDate = value;
                }
            }
            
            public global::System.DateTime LastLoginDate {
                get {
                    return this._LastLoginDate;
                }
                set {
                    this.OnPropertyChanged("LastLoginDate", this._LastLoginDate, value);
                    this._LastLoginDate = value;
                }
            }
            
            public global::System.DateTime LastPasswordChangedDate {
                get {
                    return this._LastPasswordChangedDate;
                }
                set {
                    this.OnPropertyChanged("LastPasswordChangedDate", this._LastPasswordChangedDate, value);
                    this._LastPasswordChangedDate = value;
                }
            }
            
            public global::System.DateTime LastLockoutDate {
                get {
                    return this._LastLockoutDate;
                }
                set {
                    this.OnPropertyChanged("LastLockoutDate", this._LastLockoutDate, value);
                    this._LastLockoutDate = value;
                }
            }
            
            public int FailedPasswordAttemptCount {
                get {
                    return this._FailedPasswordAttemptCount;
                }
                set {
                    this.OnPropertyChanged("FailedPasswordAttemptCount", this._FailedPasswordAttemptCount, value);
                    this._FailedPasswordAttemptCount = value;
                }
            }
            
            public global::System.DateTime FailedPasswordAttemptWindowStart {
                get {
                    return this._FailedPasswordAttemptWindowStart;
                }
                set {
                    this.OnPropertyChanged("FailedPasswordAttemptWindowStart", this._FailedPasswordAttemptWindowStart, value);
                    this._FailedPasswordAttemptWindowStart = value;
                }
            }
            
            public int FailedPasswordAnswerAttemptCount {
                get {
                    return this._FailedPasswordAnswerAttemptCount;
                }
                set {
                    this.OnPropertyChanged("FailedPasswordAnswerAttemptCount", this._FailedPasswordAnswerAttemptCount, value);
                    this._FailedPasswordAnswerAttemptCount = value;
                }
            }
            
            public global::System.DateTime FailedPasswordAnswerAttemptWindowStart {
                get {
                    return this._FailedPasswordAnswerAttemptWindowStart;
                }
                set {
                    this.OnPropertyChanged("FailedPasswordAnswerAttemptWindowStart", this._FailedPasswordAnswerAttemptWindowStart, value);
                    this._FailedPasswordAnswerAttemptWindowStart = value;
                }
            }
            
            public string Comment {
                get {
                    return this._Comment;
                }
                set {
                    this.OnPropertyChanged("Comment", this._Comment, value);
                    this._Comment = value;
                }
            }
            
            public global::System.Guid ApplicationId {
                get {
                    return this._ApplicationId;
                }
                set {
                    this.OnPropertyChanged("ApplicationId", this._ApplicationId, value);
                    this._ApplicationId = value;
                }
            }
            
            public string UserName {
                get {
                    return this._UserName;
                }
                set {
                    this.OnPropertyChanged("UserName", this._UserName, value);
                    this._UserName = value;
                }
            }
            
            public string MobileAlias {
                get {
                    return this._MobileAlias;
                }
                set {
                    this.OnPropertyChanged("MobileAlias", this._MobileAlias, value);
                    this._MobileAlias = value;
                }
            }
            
            public bool IsAnonymous {
                get {
                    return this._IsAnonymous;
                }
                set {
                    this.OnPropertyChanged("IsAnonymous", this._IsAnonymous, value);
                    this._IsAnonymous = value;
                }
            }
            
            public global::System.DateTime LastActivityDate {
                get {
                    return this._LastActivityDate;
                }
                set {
                    this.OnPropertyChanged("LastActivityDate", this._LastActivityDate, value);
                    this._LastActivityDate = value;
                }
            }
            
            public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
                if ((vMembershipUser._vMembershipUserEntityConfiguration == null)) {
                    vMembershipUser._vMembershipUserEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("NBear.Web.Data.AspNetDbEntities.vMembershipUser");
                }
                return vMembershipUser._vMembershipUserEntityConfiguration;
            }
            
            public override void ReloadQueries(bool includeLazyLoadQueries) {
            }
            
            public override object[] GetPropertyValues() {
                return new object[] {
                        this._UserId,
                        this._PasswordFormat,
                        this._MobilePIN,
                        this._Email,
                        this._LoweredEmail,
                        this._PasswordQuestion,
                        this._PasswordAnswer,
                        this._IsApproved,
                        this._IsLockedOut,
                        this._CreateDate,
                        this._LastLoginDate,
                        this._LastPasswordChangedDate,
                        this._LastLockoutDate,
                        this._FailedPasswordAttemptCount,
                        this._FailedPasswordAttemptWindowStart,
                        this._FailedPasswordAnswerAttemptCount,
                        this._FailedPasswordAnswerAttemptWindowStart,
                        this._Comment,
                        this._ApplicationId,
                        this._UserName,
                        this._MobileAlias,
                        this._IsAnonymous,
                        this._LastActivityDate};
            }
            
            public override void SetPropertyValues(System.Data.IDataReader reader) {
                if ((false == reader.IsDBNull(0))) {
                    this._UserId = this.GetGuid(reader, 0);
                }
                if ((false == reader.IsDBNull(1))) {
                    this._PasswordFormat = reader.GetInt32(1);
                }
                if ((false == reader.IsDBNull(2))) {
                    this._MobilePIN = reader.GetString(2);
                }
                if ((false == reader.IsDBNull(3))) {
                    this._Email = reader.GetString(3);
                }
                if ((false == reader.IsDBNull(4))) {
                    this._LoweredEmail = reader.GetString(4);
                }
                if ((false == reader.IsDBNull(5))) {
                    this._PasswordQuestion = reader.GetString(5);
                }
                if ((false == reader.IsDBNull(6))) {
                    this._PasswordAnswer = reader.GetString(6);
                }
                if ((false == reader.IsDBNull(7))) {
                    this._IsApproved = reader.GetBoolean(7);
                }
                if ((false == reader.IsDBNull(8))) {
                    this._IsLockedOut = reader.GetBoolean(8);
                }
                if ((false == reader.IsDBNull(9))) {
                    this._CreateDate = reader.GetDateTime(9);
                }
                if ((false == reader.IsDBNull(10))) {
                    this._LastLoginDate = reader.GetDateTime(10);
                }
                if ((false == reader.IsDBNull(11))) {
                    this._LastPasswordChangedDate = reader.GetDateTime(11);
                }
                if ((false == reader.IsDBNull(12))) {
                    this._LastLockoutDate = reader.GetDateTime(12);
                }
                if ((false == reader.IsDBNull(13))) {
                    this._FailedPasswordAttemptCount = reader.GetInt32(13);
                }
                if ((false == reader.IsDBNull(14))) {
                    this._FailedPasswordAttemptWindowStart = reader.GetDateTime(14);
                }
                if ((false == reader.IsDBNull(15))) {
                    this._FailedPasswordAnswerAttemptCount = reader.GetInt32(15);
                }
                if ((false == reader.IsDBNull(16))) {
                    this._FailedPasswordAnswerAttemptWindowStart = reader.GetDateTime(16);
                }
                if ((false == reader.IsDBNull(17))) {
                    this._Comment = reader.GetString(17);
                }
                if ((false == reader.IsDBNull(18))) {
                    this._ApplicationId = this.GetGuid(reader, 18);
                }
                if ((false == reader.IsDBNull(19))) {
                    this._UserName = reader.GetString(19);
                }
                if ((false == reader.IsDBNull(20))) {
                    this._MobileAlias = reader.GetString(20);
                }
                if ((false == reader.IsDBNull(21))) {
                    this._IsAnonymous = reader.GetBoolean(21);
                }
                if ((false == reader.IsDBNull(22))) {
                    this._LastActivityDate = reader.GetDateTime(22);
                }
                this.ReloadQueries(false);
            }
            
            public override void SetPropertyValues(System.Data.DataRow row) {
                if ((false == row.IsNull(0))) {
                    this._UserId = ((System.Guid)(this.GetGuid(row, 0)));
                }
                if ((false == row.IsNull(1))) {
                    this._PasswordFormat = ((int)(row[1]));
                }
                if ((false == row.IsNull(2))) {
                    this._MobilePIN = ((string)(row[2]));
                }
                if ((false == row.IsNull(3))) {
                    this._Email = ((string)(row[3]));
                }
                if ((false == row.IsNull(4))) {
                    this._LoweredEmail = ((string)(row[4]));
                }
                if ((false == row.IsNull(5))) {
                    this._PasswordQuestion = ((string)(row[5]));
                }
                if ((false == row.IsNull(6))) {
                    this._PasswordAnswer = ((string)(row[6]));
                }
                if ((false == row.IsNull(7))) {
                    this._IsApproved = ((bool)(row[7]));
                }
                if ((false == row.IsNull(8))) {
                    this._IsLockedOut = ((bool)(row[8]));
                }
                if ((false == row.IsNull(9))) {
                    this._CreateDate = ((System.DateTime)(row[9]));
                }
                if ((false == row.IsNull(10))) {
                    this._LastLoginDate = ((System.DateTime)(row[10]));
                }
                if ((false == row.IsNull(11))) {
                    this._LastPasswordChangedDate = ((System.DateTime)(row[11]));
                }
                if ((false == row.IsNull(12))) {
                    this._LastLockoutDate = ((System.DateTime)(row[12]));
                }
                if ((false == row.IsNull(13))) {
                    this._FailedPasswordAttemptCount = ((int)(row[13]));
                }
                if ((false == row.IsNull(14))) {
                    this._FailedPasswordAttemptWindowStart = ((System.DateTime)(row[14]));
                }
                if ((false == row.IsNull(15))) {
                    this._FailedPasswordAnswerAttemptCount = ((int)(row[15]));
                }
                if ((false == row.IsNull(16))) {
                    this._FailedPasswordAnswerAttemptWindowStart = ((System.DateTime)(row[16]));
                }
                if ((false == row.IsNull(17))) {
                    this._Comment = ((string)(row[17]));
                }
                if ((false == row.IsNull(18))) {
                    this._ApplicationId = ((System.Guid)(this.GetGuid(row, 18)));
                }
                if ((false == row.IsNull(19))) {
                    this._UserName = ((string)(row[19]));
                }
                if ((false == row.IsNull(20))) {
                    this._MobileAlias = ((string)(row[20]));
                }
                if ((false == row.IsNull(21))) {
                    this._IsAnonymous = ((bool)(row[21]));
                }
                if ((false == row.IsNull(22))) {
                    this._LastActivityDate = ((System.DateTime)(row[22]));
                }
                this.ReloadQueries(false);
            }
            
            public override int GetHashCode() {
                return base.GetHashCode();
            }
            
            public override bool Equals(object obj) {
                if ((obj == null)) {
                    return false;
                }
                if ((false == typeof(global::NBear.Web.Data.AspNetDbEntities.vMembershipUser).IsAssignableFrom(obj.GetType()))) {
                    return false;
                }
                if ((((object)(this)) == ((object)(obj)))) {
                    return true;
                }
                return ((this.isAttached && ((global::NBear.Web.Data.AspNetDbEntities.vMembershipUser)(obj)).isAttached) 
                            && (this.UserId == ((global::NBear.Web.Data.AspNetDbEntities.vMembershipUser)(obj)).UserId));
            }
            
            public class _ {
                
                public static NBear.Common.PropertyItem UserId = new NBear.Common.PropertyItem("UserId", "NBear.Web.Data.AspNetDbEntities.vMembershipUser");
                
                public static NBear.Common.PropertyItem PasswordFormat = new NBear.Common.PropertyItem("PasswordFormat", "NBear.Web.Data.AspNetDbEntities.vMembershipUser");
                
                public static NBear.Common.PropertyItem MobilePIN = new NBear.Common.PropertyItem("MobilePIN", "NBear.Web.Data.AspNetDbEntities.vMembershipUser");
                
                public static NBear.Common.PropertyItem Email = new NBear.Common.PropertyItem("Email", "NBear.Web.Data.AspNetDbEntities.vMembershipUser");
                
                public static NBear.Common.PropertyItem LoweredEmail = new NBear.Common.PropertyItem("LoweredEmail", "NBear.Web.Data.AspNetDbEntities.vMembershipUser");
                
                public static NBear.Common.PropertyItem PasswordQuestion = new NBear.Common.PropertyItem("PasswordQuestion", "NBear.Web.Data.AspNetDbEntities.vMembershipUser");
                
                public static NBear.Common.PropertyItem PasswordAnswer = new NBear.Common.PropertyItem("PasswordAnswer", "NBear.Web.Data.AspNetDbEntities.vMembershipUser");
                
                public static NBear.Common.PropertyItem IsApproved = new NBear.Common.PropertyItem("IsApproved", "NBear.Web.Data.AspNetDbEntities.vMembershipUser");
                
                public static NBear.Common.PropertyItem IsLockedOut = new NBear.Common.PropertyItem("IsLockedOut", "NBear.Web.Data.AspNetDbEntities.vMembershipUser");
                
                public static NBear.Common.PropertyItem CreateDate = new NBear.Common.PropertyItem("CreateDate", "NBear.Web.Data.AspNetDbEntities.vMembershipUser");
                
                public static NBear.Common.PropertyItem LastLoginDate = new NBear.Common.PropertyItem("LastLoginDate", "NBear.Web.Data.AspNetDbEntities.vMembershipUser");
                
                public static NBear.Common.PropertyItem LastPasswordChangedDate = new NBear.Common.PropertyItem("LastPasswordChangedDate", "NBear.Web.Data.AspNetDbEntities.vMembershipUser");
                
                public static NBear.Common.PropertyItem LastLockoutDate = new NBear.Common.PropertyItem("LastLockoutDate", "NBear.Web.Data.AspNetDbEntities.vMembershipUser");
                
                public static NBear.Common.PropertyItem FailedPasswordAttemptCount = new NBear.Common.PropertyItem("FailedPasswordAttemptCount", "NBear.Web.Data.AspNetDbEntities.vMembershipUser");
                
                public static NBear.Common.PropertyItem FailedPasswordAttemptWindowStart = new NBear.Common.PropertyItem("FailedPasswordAttemptWindowStart", "NBear.Web.Data.AspNetDbEntities.vMembershipUser");
                
                public static NBear.Common.PropertyItem FailedPasswordAnswerAttemptCount = new NBear.Common.PropertyItem("FailedPasswordAnswerAttemptCount", "NBear.Web.Data.AspNetDbEntities.vMembershipUser");
                
                public static NBear.Common.PropertyItem FailedPasswordAnswerAttemptWindowStart = new NBear.Common.PropertyItem("FailedPasswordAnswerAttemptWindowStart", "NBear.Web.Data.AspNetDbEntities.vMembershipUser");
                
                public static NBear.Common.PropertyItem Comment = new NBear.Common.PropertyItem("Comment", "NBear.Web.Data.AspNetDbEntities.vMembershipUser");
                
                public static NBear.Common.PropertyItem ApplicationId = new NBear.Common.PropertyItem("ApplicationId", "NBear.Web.Data.AspNetDbEntities.vMembershipUser");
                
                public static NBear.Common.PropertyItem UserName = new NBear.Common.PropertyItem("UserName", "NBear.Web.Data.AspNetDbEntities.vMembershipUser");
                
                public static NBear.Common.PropertyItem MobileAlias = new NBear.Common.PropertyItem("MobileAlias", "NBear.Web.Data.AspNetDbEntities.vMembershipUser");
                
                public static NBear.Common.PropertyItem IsAnonymous = new NBear.Common.PropertyItem("IsAnonymous", "NBear.Web.Data.AspNetDbEntities.vMembershipUser");
                
                public static NBear.Common.PropertyItem LastActivityDate = new NBear.Common.PropertyItem("LastActivityDate", "NBear.Web.Data.AspNetDbEntities.vMembershipUser");
                
                private _() {
                }
            }
        }
    }
